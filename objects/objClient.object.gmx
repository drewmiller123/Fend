<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(objTextBoxIP.ip == "")
{
    IPAddress = "127.0.0.1"
}
else
{
    IPAddress = objTextBoxIP.ip;
}
if(objTextBoxPort.port == "")
{
    remotePort = 7777;
}
else
{
    remotePort = real(objTextBoxPort.port);
}

socket = network_create_socket(network_socket_udp);
//isConnected = network_connect(socket, IPAddress, port);
buffer = buffer_create(1024, buffer_grow, 1);

allsprites = ds_list_create();
sprites = 0;

playerSprites = ds_list_create();
numPlayerSprites = 0;
//currArrow = 0;

ping = noone;

player = 0;
ready = false;
needReady = false;
newGold = 0;
statAck = false;
initialAck = false;

fireUpgrade = true;
frostUpgrade = true;
lightningUpgrade = true;

//carnageState = false;
//upgradeState = false;
currentState = mBattleFieldState;
oldState = mBattleFieldState;
subState = 0; //0 when switching states, 1 when task is completed

currentWave = 0;
numWaves = 0;

coin = instance_create(x,y,objDisplayCoin);


buffer_seek(buffer, buffer_seek_start,0);
buffer_write(buffer, buffer_u8,netInitialRequest);
buffer_write(buffer, buffer_string,version);
alarm[1] = 30;
network_send_udp(socket, IPAddress, remotePort, buffer, buffer_tell(buffer));

alarm[2] = 1;//send first ping
result = 0;//

numPlayers = 0;
lobbyCounter = 0;

paused = false;

serverTimeout = 300;
errMsg = "";


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Error Alarm
room_goto(rmMainMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ping Alarm

buffer_seek(buffer, buffer_seek_start,0);
buffer_write(buffer, buffer_u8,netPing);
buffer_write(buffer, buffer_u32, current_time);
network_send_udp(socket, IPAddress, remotePort, buffer, buffer_tell(buffer));
alarm[2] = 30;//ping ever half second
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for initial ack
if(!initialAck)
{
    buffer_seek(buffer, buffer_seek_start,0);
    buffer_write(buffer, buffer_u8,netInitialRequest);
    network_send_udp(socket, IPAddress, remotePort, buffer, buffer_tell(buffer));
    alarm[1] = 30;
}
else
{
    initialAck = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///check for statAck
if(!statAck)
{
    buffer_seek(buffer, buffer_seek_start,0);
    buffer_write(buffer, buffer_u8,netStatUpdate);
    buffer_write(buffer, buffer_u64, gold);
    buffer_write(buffer, buffer_u16, arrowDamage);
    buffer_write(buffer, buffer_u8, multiShot);
    buffer_write(buffer, buffer_u16, bowSpeed*1000);
    network_send_udp(socket, IPAddress, remotePort, buffer, buffer_tell(buffer));
    alarm[0] = 30;
}
else
{
    statAck = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*buffer_seek(buffer, buffer_seek_start,0);
buffer_write(buffer, buffer_u8,netPing);
buffer_write(buffer, buffer_u32, current_time);
result = network_send_udp(socket, IPAddress, remotePort, buffer, buffer_tell(buffer));*/

var q = keyboard_check(ord('Q'));
var w = keyboard_check(ord('W'));
var e = keyboard_check(ord('E'));
var r = keyboard_check(ord('R'));
var leftClicked = mouse_check_button(mb_left);
var escape = keyboard_check_pressed(vk_escape);

if(oldState != currentState)
{
    subState = 0;
    if(currentState == mBattleFieldState)
    {
        ready = false;
    }
}
oldState = currentState;


if(currentState == mBattleFieldState)
{
    scrSendMouse(mouse_x, mouse_y, leftClicked)
    
    if(q)
    {
        scrSendKey(ord('Q'));
    }
    if(w)
    {
        scrSendKey(ord('W'));
    }
    if(e)
    {
        scrSendKey(ord('E'));
    }
    if(r)
    {
        scrSendKey(ord('R'));
    }
    
    if(currArrow == 0)
    {
        currentArrow = objArrow;
    }
    else if(currArrow == 1 &amp;&amp; fireUpgrade)
    {
        currentArrow = objFireArrow;
    }
    else if(currArrow == 2)
    {
        if(frostFireUpgrade)
        {
            currentArrow = objFrostFireArrow;
        }
        else if(frostUpgrade)
        {
            currentArrow = objIceArrow;
        }
        
    }
    else if(currArrow == 3)
    {
        if(frostFireLightningUpgrade)
        {
            currentArrow = objFrostFireLightningArrow;
        }
        else if(lightningUpgrade)
        {
            currentArrow = objLightningArrow;
        }
    }
}
else if(currentState == mUpgradeState)
{
    if(room != rmMultiUpgrade &amp;&amp; subState == 0)
    {
        room_goto(rmMultiUpgrade);
    }
    if(subState == 1)
    {
        //scrSendStats();
    }
}
/*else if(currentState == mCarnageState)
{
    
}*/

if(escape)
{
    if(!paused)
    {
        instance_create(view_wview[0]/2,view_hview[0]/2,objClientPause);
    }
}

if(!instance_exists(objClientPause))
{
    paused = false;
}


/*if(needReady &amp;&amp; room == rmClientBattleField)
{
    currentState = mLobbyState;
}*/
/*if(room == rmMultiUpgrade)
{
    currentState = mUpgradeState;
}*/

//set to lobby state if not in battlefield state
/*if(room == rmClientBattleField &amp;&amp; currentState == mUpgradeState)
{
    currentState = mLobbyState;
}*/

//Check for Server Timeout
serverTimeout--;
if(serverTimeout &lt;= 0)
{
    if(errMsg == "")
    {
        errMsg = "Lost connection to server.##Going to Main Menu.";
        alarm[11] = 180;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(ds_map_find_value(async_load, "type"))
{
    case network_type_data:
        var buff = ds_map_find_value(async_load, "buffer");
        //buffer_seek(buff, buffer_seek_start, 0);
        scrClientReceivedPacket(buff);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
buffer_delete(buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

draw_set_halign(fa_right);
draw_set_font(fntPing);
scrDrawTextOutline("Ping: " + string(ping), view_wview[0] -32, 8,c_white,c_black);  


draw_set_font(fntDamageUpgrade);
draw_set_halign(fa_left);

//draw_text(5, 55, "State: " + string(currentState));//
//draw_text(5, 80, "SubState: " + string(subState));//
//draw_text(5, 105, "RemoteIP " + IPAddress);//
//draw_text(5, 130, "RemotePort " + string(remotePort));//

if(currentState == mBattleFieldState)
{
    draw_set_font(fntDamageUpgrade);
    draw_set_halign(fa_left);
    //Day
    scrDrawTextOutline("Day:" + string(day),view_xview[0]+32,32,c_white,c_black);
    //Gold
    //scrDrawTextOutline("Gold: ",view_wview[0]/2 - sprite_get_width(sprInfoTextBox)/2 + 10,32,c_yellow,c_black);
    draw_set_halign(fa_right);
    scrDrawTextOutline(string(gold),view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 10,32,c_yellow,c_black);
    if(!instance_exists(coin))
    {
        coin = instance_create(x,y,objDisplayCoin);
    }
    coin.x = view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 20 - coin.sprite_width/2 - string_width(string(gold));
    coin.y = 46;
    coin.visible = true;

    //Wave
    draw_set_halign(fa_right);
    scrDrawTextOutline("Wave: " + string(currentWave) + "/" + string(numWaves),view_wview[0] - 32,32,c_white,c_black);
    draw_set_halign(fa_left);
}
else
{
    draw_set_font(fntDamageUpgrade);
    draw_set_halign(fa_left);
    //Day
    scrDrawTextOutline("Day:" + string(day),view_xview[0]+32,32,c_white,c_black);
    //Gold
    //scrDrawTextOutline("Gold: ",view_wview[0]/2 - sprite_get_width(sprInfoTextBox)/2 + 10,32,c_yellow,c_black);
    draw_set_halign(fa_right);
    scrDrawTextOutline(string(gold),view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 10,32,c_yellow,c_black);
    if(!instance_exists(coin))
    {
        coin = instance_create(x,y,objDisplayCoin);
    }
    coin.x = view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 20 - coin.sprite_width/2 - string_width(string(gold));
    coin.y = 46;
    coin.visible = true;
}


if(currentState == mLobbyState)
{
    draw_set_font(fntArrowUpgrade);
    draw_set_halign(fa_left);
    /*//Day
    scrDrawTextOutline("Day:" + string(day),view_xview[0]+32,32,c_white,c_black);
    //Gold
    //scrDrawTextOutline("Gold: ",view_wview[0]/2 - sprite_get_width(sprInfoTextBox)/2 + 10,32,c_yellow,c_black);
    draw_set_halign(fa_right);
    scrDrawTextOutline(string(gold),view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 10,32,c_yellow,c_black);
    if(!instance_exists(coin))
    {
        coin = instance_create(x,y,objDisplayCoin);
    }
    coin.x = view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 20 - coin.sprite_width/2 - string_width(string(gold));
    coin.y = 46;
    coin.visible = true;*/
    
    //display lobby stuff
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    var sp = view_hview[0] * 32/135;
    var vSpacing = view_hview[0] * 4/27;
    var spacing = sprite_get_width(sprDamageUpgrade)/3;
    for(d = 0; d &lt; numPlayers; d++)
    {
        var multiSprite = scrGetMultiSprite(mMultiShot[d]);
        
        draw_sprite(sprLobbyPlayer, (d == player), view_wview[0]/32, sp + d*vSpacing);
        
        draw_sprite(sprPlayerArcherDisplay,lobbyCounter*mBowSpeed[d],view_wview[0]/16, sp + d*vSpacing)
        scrDrawTextOutline("Player " + string(d+1) ,view_wview[0]/16+sprite_get_width(sprPlayerArcherDisplay), sp + d*vSpacing - string_height("Player"),c_white,c_black);
        
        //gold
        draw_sprite(sprBigCoin, lobbyCounter/2, view_wview[0]/16+sprite_get_width(sprPlayerArcherDisplay), sp + d*vSpacing + string_height("Player"));
        scrDrawTextOutline(scrSimplifyNum(mGold[d]), view_wview[0]/16+sprite_get_width(sprPlayerArcherDisplay) + sprite_get_width(sprBigCoin), sp + d*vSpacing + string_height("Player"),c_yellow,c_black);
        
        draw_sprite_ext(sprDamageUpgrade,0,view_wview[0]/4, sp + d*vSpacing,.5,.5,0,c_white,1);
        scrDrawTextOutline(string(mArrowDamage[d]), view_wview[0]/4 + spacing,sp + d*vSpacing,c_white,c_black);
        draw_sprite_ext(multiSprite,0, view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string(mMultiShot[d]), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite_ext(sprFireDisplay,0,view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*2, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string_replace_all(string(mFireMult[d]),"0.","."), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*2 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite_ext(sprFrostDisplay,0,view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*3, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string_replace_all(string(mFrostMult[d]),"0.","."), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*3 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite_ext(sprLightningDisplay,0,view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*4, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string_replace_all(string(mLightningMult[d]),"0.","."), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*4 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite(sprReady, mReady[d], view_wview[0] * 43/60, sp + d*vSpacing);
        
    }
    lobbyCounter++;
    draw_set_valign(fa_top);
}

if(currentState == mCarnageState)
{
    var cw = sprite_get_width(sprCarnageReport);
    var ch = sprite_get_height(sprCarnageReport);
    var cx = view_wview[0]/2;
    var cy = view_hview[0]/2-ch/16;   
    var cshift = cw/6;
    
    draw_set_halign(fa_center);
    scrDrawTextOutline("Level Complete!", cx, cy - ch/2 + 20, c_white, c_black)
    
    draw_set_halign(fa_left);
    scrDrawTextOutline("Enemies Defeated: ", cx - cw/2 + 40, cy - ch/2 + 60, c_white, c_black);
    
    scrDrawTextOutline("Damage# Dealt:", cx-cw/2 + 40, cy+ch/16-string_height("100%")*2, c_white, c_black);
    
    scrDrawTextOutline("Total Gold Earned: ", cx - cw/2 + 40, cy + ch/4 + 20, c_yellow, c_black)
    scrDrawTextOutline(string(multiplayerGold), cx - cw/2 + 40 + string_width("Total Gold Earned: ") + sprite_get_width(sprBigCoin), cy + ch/4 + 20, c_yellow, c_black)
    
    scrDrawTextOutline("Your Cut: ", cx - cw/2 + 40, cy + ch/4 + 60, c_yellow, c_black)
    scrDrawTextOutline(string(newGold), cx - cw/2 + 40 + string_width("Your Cut: ") + sprite_get_width(sprBigCoin), cy + ch/4 + 60, c_yellow, c_black)
    
    draw_set_halign(fa_center);
    for(i=0; i&lt;numPlayers; i++)
    {
        if(i == player)
        {
            var pColor = c_lime;
        }
        else
        {
            var pColor = c_white;
        }
        scrDrawTextOutline(string(mDamagePercentage[i]) + "%", cx-cw/2 + cshift*(i+2), cy+ch/16-string_height("100%"), pColor, c_black);
        scrDrawTextOutline("P" + string(i+1), cx-cw/2 + cshift*(i+2), cy+ch/16+string_height("100%")/2, pColor, c_black);
    }
    draw_set_color(c_white);
}

if(errMsg != "")
{
    draw_set_halign(fa_center);
    scrDrawTextOutline(errMsg,view_wview[0]/2,view_hview[0]/2,c_white,c_black);
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all sprites in level
if(room != rmMultiUpgrade)
{
    // Now loop through all active sprites and draw them
    var index = 0;
    for(i=0;i&lt;sprites;i++){
        var xx,yy,spIndex,iIndex,angle,xscale,yscale,alpha;// col;
        
        xx = ds_list_find_value(allsprites,index++);
        yy = ds_list_find_value(allsprites,index++);
        spIndex = ds_list_find_value(allsprites,index++);
        iIndex = ds_list_find_value(allsprites,index++);
        angle = ds_list_find_value(allsprites, index++);
        xscale = ds_list_find_value(allsprites,index++)/1000;
        yscale = ds_list_find_value(allsprites, index++)/1000;
        alpha = ds_list_find_value(allsprites, index++)/1000;
        
        scrClientDrawSprite(xx,yy,spIndex,iIndex,angle,xscale,yscale,alpha);
        //draw_sprite_ext(spIndex,iIndex,xx,yy,xscale,yscale,angle,c_white,alpha);
    }
    index = 0;
    for(i=0;i&lt;numPlayerSprites;i++){
        var xx,yy,spIndex,iIndex,angle,xscale,yscale,alpha;// col;
        
        xx = ds_list_find_value(playerSprites,index++);
        yy = ds_list_find_value(playerSprites,index++);
        spIndex = ds_list_find_value(playerSprites,index++);
        iIndex = ds_list_find_value(playerSprites,index++);
        angle = ds_list_find_value(playerSprites, index++);
        xscale = ds_list_find_value(playerSprites,index++)/1000;
        yscale = ds_list_find_value(playerSprites, index++)/1000;
        alpha = ds_list_find_value(playerSprites, index++)/1000;
    
        draw_sprite_ext(spIndex,iIndex,xx,yy,xscale,yscale,angle,c_white,alpha);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
