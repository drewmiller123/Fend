<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(room == rmWin)
{
    endlessUnlocked = true;
    scrSaveOptions();
    scrSaveGame();
}
if(room == rmFrostUpgrade)
{
    frostFireUpgrade = true;
}
if(room == rmLightningUpgrade)
{
    frostFireLightningUpgrade = true;
}

if(hosting)
{
    
    with(objServer)
    {
        for(i = 0; i &lt;= numClients; i++)
        {
            mNewGold[i] = round(multiplayerGold/(numClients+1));
        }
        //gold += mNewGold[0];//host updates their gold//this was causing issues when going to the shop
        var count = ds_list_size(socketList);
        if(count &gt; 0)
        {
            //roomString = string(room == rmLobby);
              
            
            for(i=0;i&lt;count;i++)
            {   
        
                var sock = ds_list_find_value(socketList,i);
                var ip = ds_list_find_value(ipList,i);
                var port = ds_list_find_value(portList,i);
                
                buffer_seek(buffer, buffer_seek_start, 0);
                buffer_write(buffer, buffer_u8, netStatUpdate);
                //buffer_write(buffer, buffer_bool, true);
                buffer_write(buffer, buffer_u32, mNewGold[i]); 
        
                network_send_udp(sock, ip, port, buffer, buffer_tell(buffer));   
           
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>escape = keyboard_check_pressed(vk_escape);
q = keyboard_check_pressed(ord('Q'));
w = keyboard_check_pressed(ord('W'));
e = keyboard_check_pressed(ord('E'));
r = keyboard_check_pressed(ord('R'));

if(!endlessMode)
{
    if(day &gt;= 15)
    {
        background_index[0] = bgSnowy;
    }
    else
    {
        background_index[0] = bgGrassy;
    }
}


if(q)
{
    currentArrow = objArrow;
}
if(w &amp;&amp; fireUpgrade)
{
    currentArrow = objFireArrow;
}
if(e &amp;&amp; (frostUpgrade || frostFireUpgrade))
{
    if(frostFireUpgrade)
    {
        currentArrow = objFrostFireArrow;
    }
    else
    {
        currentArrow = objIceArrow;
    }
}
if(r &amp;&amp; (lightningUpgrade || frostFireLightningUpgrade))
{
    if(frostFireLightningUpgrade)
    {
        currentArrow = objFrostFireLightningArrow;
    }
    else
    {
        currentArrow = objLightningArrow;
    }
}

if(escape)
{
    //game_end();
    if(room == rmWin)
    {
        room_goto(rmMainMenu);
    }
    else
    {
        if(hosting)
        {
            room_goto(rmMultiUpgrade);
        }
        else
        {
            room_goto(rmUpgrade);
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fntDamageUpgrade);
draw_set_halign(fa_center);

if(room == rmFireUnlock)
{
    scrDrawTextOutline("Fire Arrows Unlocked!"
                        +"#####Fire Arrows can ignite or melt most enemies."
                        +"#####During battle, use the 'W' key to equip Fire Arrows."
                        +"##Press the 'Q' key to switch back to Normal Arrows",x,y,c_white,c_black)
}
if(room == rmFrostUnlock)
{
    scrDrawTextOutline("Frost Arrows Unlocked!"
                        +"#####Frost Arrows can slow and prevent enemies from using##some magical abilities."
                        +"#####During battle, use the 'E' key to equip Frost Arrows.",x,y,c_white,c_black)
}
if(room == rmLightningUnlock)
{
    scrDrawTextOutline("Lightning Arrows Unlocked!"
                        +"#####Lightning Arrows cause electrical arcs##on contact with most enemies."
                        +"#####During battle, use the 'R' key to equip Lightning Arrows.",x,y,c_white,c_black)
}
if(room == rmWin)
{
    scrDrawTextOutline("##Thank you for playing Fend!"
                        +"#####Please try out Endless Mode##by selecting " + chr(34) + "New Game" + chr(34) + " from the Main Menu.",view_wview[0]/2,y,c_white,c_black)
}
if(room == rmFireUpgrade)
{
    scrDrawTextOutline("Fire Arrows Upgraded!"
                        +"#####Fire Arrows now deal significantly more damage."
                        +"#####This applies to burn damage and damage against"
                        +"##water-based enemies.",x,y,c_white,c_black)
}
if(room == rmFrostUpgrade)
{
    scrDrawTextOutline("Ice Arrows Upgraded!"
                        +"#####Ice arrows have been replaced by Frost-Fire Arrows."
                        +"#####Frost-Fire Arrows have the effects of both"
                        +"##Fire and Ice Arrows.",x,y,c_white,c_black)
}
if(room == rmLightningUpgrade)
{
    scrDrawTextOutline("Lightning Arrows Upgraded!"
                        +"#####Lightning Arrows have been replaced by Ultimate Arrows."
                        +"#####Ultimate Arrows have the effects of all other Arrows",x,y,c_white,c_black)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
