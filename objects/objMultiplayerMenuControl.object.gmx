<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hostState = false;
newState = false;

if(room == rmConnect)
{
    if(hosting)
    {
        instance_create(view_wview[0]/2, view_hview[0]/2, objTextBoxPort);
        instance_create(view_wview[0]/2, view_hview[0]/2 + sprite_get_height(sprMenuButton), objHostButton);
    }
    else
    {
        instance_create(view_wview[0]/2, view_hview[0]/2, objTextBoxIP);
        instance_create(view_wview[0]/2, view_hview[0]/2+ sprite_get_height(sprMenuButton)/2, objTextBoxPort);
        instance_create(view_wview[0]/2, view_hview[0]/2 + sprite_get_height(sprMenuButton)*1.5, objJoinButton);
    }
}

if(room == rmLobby)
{
    if(hosting)
    {
        lobbyCounter = 0;
        coin = instance_create(x,y,objDisplayCoin);
        //objServer.mReady[0] = false;
        //objServer.mReady[1] = false;
        //objServer.mReady[2] = false;
        //objServer.mReady[3] = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>escape = keyboard_check_pressed(vk_escape);


if(escape)
{
    with(objServer)
    {
        instance_destroy();
    }
    with(objClient)
    {
        instance_destroy();
    }
    room_goto(rmMainMenu);
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fntDamageUpgrade);
draw_set_halign(fa_center);


if(newState)
{
    scrDrawTextOutline("Starting a New Game will erase your multiplayer progress. ##Would you like to start a New Game?",x,y,c_white,c_black)
}

/*if(newState || endlessState)
{
    scrDrawTextOutline("Starting a New Game will erase all saved progress. ##Would you like to start a New Game?",x,y,c_white,c_black)
}

if(exitState)
{
    scrDrawTextOutline("##Would you like to close Fend?",x,y,c_white,c_black)
}

if(endlessSelectState)
{
    scrDrawTextOutline("##Which Mode would you like to play?",x,y,c_white,c_black)
}*/

if(room == rmLobby)
{
    draw_set_font(fntDamageUpgrade);
    draw_set_halign(fa_left);
    //Day
    scrDrawTextOutline("Day:" + string(day),view_xview[0]+32,32,c_white,c_black);
    //Gold
    //scrDrawTextOutline("Gold: ",view_wview[0]/2 - sprite_get_width(sprInfoTextBox)/2 + 10,32,c_yellow,c_black);
    draw_set_halign(fa_right);
    scrDrawTextOutline(string(gold),view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 10,32,c_yellow,c_black);
    if(instance_exists(coin))
    {
        coin.x = view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 20 - coin.sprite_width/2 - string_width(string(gold));
        coin.y = 46;
        coin.visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
