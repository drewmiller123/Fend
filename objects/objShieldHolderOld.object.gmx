<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShieldHolder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(endlessMode)
{
    maxHP = 10 * power(endlessHPScaling,(day - 1) div 10);
    worth = floor(3 * power(endlessGoldScaling,(day - 1) div 10));
}
else
{
    maxHP = 10 * power(HPScaling,(day - 1) div 10);
    worth = 5 * power(goldScaling,(day - 1) div 10);
}

HP = maxHP;
speed = baseEnemySpeed;
startingSpeed = speed;
image_speed = .25;
startingImageSpeed = image_speed;
image_index = irandom(image_number-1);
attacking = false;
attackDamage = .5;
//attackReset = false;
attackCD = 0;

burning = false;
burnTimer = 0;
timeBurning = 0;
fire = noone;

chilled = false;
chillTimer = 0;
frost = noone;

shield = instance_create(x,y,objShield);
shield.depth = -1;
shield.owner = id;
//shield.speed = speed;

//squished = false;
hpBar = instance_create(x, y+sprite_height/2 + 8, objHPBar);
hpBar.owner = id;
hpBar.image_xscale = sprite_width/2 / hpBar.sprite_width;
hpBar.image_yscale = 6 / hpBar.sprite_height;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(shield)
{
    if(object_index == objShield)
    {
        instance_destroy();
    }
}

with(fire)
{
    instance_destroy();
}
with(frost)
{
    instance_destroy();
}

gold += worth;
scrCoinSplosion();

//Add to carnage report
event_perform(ev_other,ev_user10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

if(instance_exists(shield))
{
    shield.x = x;
    shield.y = y;
}
else
{
    var pez = instance_create(x,y,objPeasant);
    pez.burning = burning;
    pez.burnTimer = burnTimer;
    pez.chilled = chilled;
    pez.chillTimer = chillTimer;
    if(burning)
    {
        pez.fire = instance_create(x,y,objFireEffect);
        pez.fire.paletteIndex = fire.paletteIndex;
    }
    pez.HP = HP;
    pez.worth = worth;
    worth = 0;
    instance_destroy();
}


if(!instance_exists(objGate))
{
    sprite_index = sprShieldHolder;
    speed = startingSpeed;
    image_speed = .25;
    attacking = false;
}

if(attacking &amp;&amp; instance_exists(shield))
{
    shield.mask_index = sprNoMask;
    shield.burning = false;
    shield.drawHP = false;
    attackCD++;
    if(attackCD &gt;=60)
    {
        attackCD = 0;
        shield.x = x+sprite_width/8;
        shield.image_angle = 90;
        objGate.HP -= attackDamage;
    }
    else if(attackCD &gt;= 59)
    {
        shield.image_angle = 87
        shield.x = x+sprite_width/8;
    }
    else if(attackCD &gt;= 58)
    {
        shield.image_angle = 83;
        shield.x = x+sprite_width*3/16;
    }
    else
    {
        shield.image_angle = 80;
        shield.x = x + sprite_width/4;
    }
    
}
else if(instance_exists(shield))
{
    shield.image_angle = 0;
    attackCD = 0;
    shield.mask_index = sprShield;
    shield.drawHP = true;
}


if(burning)
{
    if(instance_exists(fire))
    {
        fire.x = x;
        fire.y = y;
    }
    
    burnTimer--;
    timeBurning++;
    if(timeBurning mod 30 == 0)
    {
        HP -= arrowDamage*fireDamageMult;//(burnDuration/30);
    }
    
    if(burnTimer &lt;= 0)
    {
        timeBurning = 0;
        burning = false;
        with(fire)
        {
            instance_destroy();
        }
    }
}
else
{
    timeBurning = 0;
    with(fire)
    {
        instance_destroy();
    }
}

if(chilled)
{
    if(instance_exists(frost))
    {
        frost.x = x;
        frost.y = y;
    }
    
    chillTimer--;
    if(image_speed != startingImageSpeed/2)
    {
        image_speed = startingImageSpeed/2;
        image_index = ceil(image_index);
    }
    
    if(speed != 0)
    {
        speed = startingSpeed/2;
    }
    
    if(chillTimer == 0)
    {
        chilled = false;
        image_speed = startingImageSpeed;
        image_index = ceil(image_index);
        if(speed != 0)
        {
            speed = startingSpeed;
        }
        with(frost)
        {
            instance_destroy();
        }
    }
}
else
{
    with(frost)
    {
        instance_destroy();
    }
}

if(instance_exists(hpBar))
{
    hpBar.x = x;
    hpBar.y = y + sprite_height/2 + 8;
}

if(HP &lt;= 0)
{
    if(instance_exists(shield))
    {
        if(shield.object_index == objShield)
        {
            var inst = instance_create(x,y,objShieldHolderDead);
        }
        else
        {
            var inst = instance_create(x,y,objPeasantDead);
        }
    }
    else
    {
        var inst = instance_create(x,y,objPeasantDead);
    }
    //inst.shieldHP = shield.HP;
    //inst.squished = squished;
    var snd = choose(sndSoldierDeath1, sndSoldierDeath2);
    audio_play_sound(snd, 0, false);
    //with(shield)
    //{
    //    instance_destroy();
    //}
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HP -= arrowDamage;
/*x += 1;
burning = true;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x,y,objFireEffect);
}*/
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objIceArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HP -= (arrowDamage/2 + arrowDamage*frostDamageMult);
//x += 1;
//event_perform(ev_other, ev_user14)//handle chilling
chilled = true;
chillTimer = chillDuration;
if(!instance_exists(frost))
{
    frost = instance_create(x,y,objFrostEffect);
    frost.image_xscale = sprite_width/frost.sprite_width;
    frost.image_yscale = sprite_height/frost.sprite_height;
}
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_collision, objFireArrow);
fire.paletteIndex = 1;
event_perform(ev_collision, objIceArrow);
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HP -= arrowDamage/2;
//x += 1;
burning = true;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x,y,objFireEffect);
}
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>HP -= arrowDamage;
//x += 1;
with(other)
{
    
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
image_speed = 0;
attacking = true;
/*sprite_index = sprShieldAttack;
if(image_index == 0)
{
    attackReset = true;
}
if(image_index == 3 &amp;&amp; attackReset)
{
    attackReset = false;
    objGate.HP -= attackDamage;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(HP &lt; maxHP)
{
    draw_healthbar(x-sprite_width/4,y+sprite_height/2+4,x+sprite_width/4,y+sprite_height/2+8,HP/maxHP*100,c_black,c_red,c_red,0,true,true);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pal_swap_set(sprMagePal,magePalIndex,false);
    draw_self()
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
