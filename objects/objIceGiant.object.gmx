<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprIceGiantWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(endlessMode)
{
    maxHP = 900 * power(endlessHPScaling,(day - 1) div 10);
    worth = floor(200 * power(endlessGoldScaling,(day - 1) div 10));
}
else
{
    maxHP = 4000 * power(HPScaling/2,(day - 1) div 10);
    worth = 2000 * power(goldScaling,(day - 1) div 10);
}


HP = maxHP;
speed = baseEnemySpeed*2/3;
baseSpeed = speed;
image_index = irandom(image_number-1);
image_speed = 2;
baseImageSpeed = image_speed;
attackDamage = 1;
attackReset = false;

burning = false;
burnTimer = 0;
fire = noone;
image_alpha = .8;

//y+=sprite_height/2;
//squished = false;

hpBar = instance_create(x, y+sprite_height/2 + 8, objHPBar);
hpBar.owner = id;
hpBar.image_xscale = sprite_width/2 / hpBar.sprite_width;
hpBar.image_yscale = 6 / hpBar.sprite_height;

firePlayer = 0;
lightningPlayer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//gold += worth;
//with(fire)
//{
//    instance_destroy();
//}
//scrCoinSplosion();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

image_xscale = (maxHP + 3*HP)/4/maxHP;
image_yscale = (maxHP + 3*HP)/4/maxHP;
image_speed = baseImageSpeed * (maxHP + 3*HP)/4/maxHP;

if(y+sprite_height*29/64 != 988)
{
    y = 988-sprite_height*29/64;
}

if(!instance_exists(objGate))
{
    sprite_index = sprIceGiantWalk;
    speed = baseSpeed * (maxHP + 3*HP)/4/maxHP;
}
else if(place_meeting(x-sprite_width/2,y,objGate))
{
    speed = 0;
    if(sprite_index != sprIceGiantAttack)
    {
        sprite_index = sprIceGiantAttack;
        image_index = 0;    
    }
    if(image_index &lt;= 20)
    {
        attackReset = true;
    }
    if(image_index &gt;= 80 &amp;&amp; attackReset)
    {
        attackReset = false;
        objGate.HP -= attackDamage;
    }
}
else
{
    speed = baseSpeed * (maxHP + 3*HP)/4/maxHP;
    sprite_index = sprIceGiantWalk;
}

if(instance_exists(hpBar))
{
    hpBar.x = x;
    hpBar.y = y + sprite_get_height(sprIceGiantWalk)/2*image_yscale + 8;
}

if(HP &lt;= 0)
{
    var inst = instance_create(x,y-sprite_height,objHeadDrop);
    //inst.squished = squished;
    //var snd = choose(sndSoldierDeath1, sndSoldierDeath2);
    //audio_play_sound(snd, 0, false);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
if(hosting)
{
    lightningPlayer = other.player;
    inst.player = lightningPlayer;
}
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if((HP - arrowDamage) div (maxHP/20) != HP div (maxHP/20))
{
    var inst = instance_create((x + other.x)/2,other.y,objIceDrop);
    inst.parentSpeed = speed;
}
HP -= arrowDamage;*/
/*x += 1;
burning = true;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x,y,objFireEffect);
}*/
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
if(hosting)
{
    lightningPlayer = other.player;
    inst.player = lightningPlayer;
}
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objIceArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    inst.sprite_index = sprBrokenIceArrow;
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_perform(ev_collision, objFireArrow);
//event_perform(ev_collision, objIceArrow);
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = mArrowDamage[other.player]/2 + mArrowDamage[other.player]*mFireMult[other.player];
    mDamageTotal += dam;
    mDamageDealt[other.player] += dam;
}
else
{
    var dam = (arrowDamage/2+arrowDamage*fireDamageMult);
}

if((HP - dam) div (maxHP/10) != HP div (maxHP/10))
{
    var inst = instance_create((x + other.x)/2,other.y,objIceDrop);
    inst.parentSpeed = min(speed,-.1);
    inst.worth = 0;
    inst.maxHP = maxHP/40;
    //inst.HP = maxHP/40;
}
HP -= dam;
/*x += 1;
burning = true;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x,y,objFireEffect);
}*/

//part_particles_create(parts,x,y,partSteam,1);
scrCreateParticles(x,y,partSteam,1);
if(audio_is_playing(sndSteam))
{
    audio_sound_set_track_position(sndSteam,.2);
    //audio_play_sound(sndSteam,0,false);
    scrPlayAudio(sndSteam);
}
else
{
    audio_sound_set_track_position(sndSteam,0);
    //audio_play_sound(sndSteam,0,false);
    scrPlayAudio(sndSteam);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>speed = 0;
sprite_index = sprIceGiantAttack;
if(image_index &lt;= 20)
{
    attackReset = true;
}
if(image_index &gt;= 80 &amp;&amp; attackReset)
{
    attackReset = false;
    objGate.HP -= attackDamage;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = mArrowDamage[lightningPlayer]*mLightningMult[lightningPlayer];
    //HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[lightningPlayer] += dam;
}
else
{
    var dam = arrowDamage*lightningDamageMult;
}

if((HP - dam) div (maxHP/10) != HP div (maxHP/10))
{
    var inst = instance_create((x + other.x)/2,other.y,objIceDrop);
    inst.parentSpeed = min(speed,-.1);
    inst.worth = 0;
    inst.maxHP = maxHP/40;
    //inst.HP = maxHP/40;
}
HP -= dam;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = mArrowDamage[lightningPlayer]*mLightningMult[lightningPlayer];
    //HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[lightningPlayer] += dam;
}
else
{
    var dam = arrowDamage*lightningDamageMult;
}

if((HP - dam) div (maxHP/10) != HP div (maxHP/10))
{
    var inst = instance_create((x + other.x)/2,other.y,objIceDrop);
    inst.parentSpeed = min(speed,-.1);
    inst.worth = 0;
    inst.maxHP = maxHP/40;
    //inst.HP = maxHP/40;
}
HP -= dam;

event_perform(ev_collision, objFireArrow);
//event_perform(ev_collision, objIceArrow);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(HP &lt; maxHP)
{
    draw_healthbar(x-sprite_get_width(sprIceGiantWalk)/4,y+sprite_get_height(sprIceGiantWalk)/2*image_yscale+4,x+sprite_get_width(sprIceGiantWalk)/4,y+sprite_get_height(sprIceGiantWalk)/2*image_yscale+8,HP/maxHP*100,c_black,c_red,c_red,0,true,true);
}*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(burning)
//{
    //shader_set(shdBurn);
    //draw_self();
//    shader_reset();
    //draw_sprite_ext(sprFootSoldierEffectMask,image_index,x,y,1,1,0,c_red,.5);
//}
//else
//{
pal_swap_set(sprIcePal,icePalIndex,false);
    draw_self();
pal_swap_reset();
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
