<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTrollBoulder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objNetDrawParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//image_speed = .2;
image_speed = 0;
//speed = baseEnemySpeed/2;

attacking = false;
damaging = false;
attackReset = false;
troll = noone;

y-=sprite_height/2;

roll = TweenNull();
pulse = TweenNull();

//roll = TweenCreate(self, image_angle__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,0,360);
//pulse = TweenCreate(self, x__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,x,x-60);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TweenPlay(tween);
//pulse = TweenCreate(self, x__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,x,x-60);

if(instance_exists(objGate))
{
    if(x &lt; objGate.x + sprite_width*7/8 &amp;&amp; !attacking)
    {
        TweenStop(pulse);
        TweenStop(roll);
        speed = 0;
        attacking = true;
    }
}
else
{
    attacking = false;
}

if(attacking)
{
    if(place_meeting(x+speed,y,objGate))
    {
        TweenStop(pulse);
        //TweenStop(roll);
        damaging = true;
        while(!place_meeting(x+sign(speed),y,objGate))
        {
            x+=sign(speed);
        }
        speed = -speed;
        TweenReverse(roll);
        if(attackReset)
        {
            objGate.HP -= 25;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    inst.sprite_index = sprBrokenFrostFireLightningArrow;
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    inst.sprite_index = sprBrokenLightningArrow;
    inst.image_speed = .25;
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objIceArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    inst.sprite_index = sprBrokenIceArrow;
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    inst.sprite_index = sprBrokenFrostFireArrow;
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    inst.sprite_index = sprBrokenFireArrow;
    inst.image_speed = .25;
    inst.rot = 0;
    //inst.image_angle = 270;
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(other)
{
    var inst = instance_create(x,y,objBrokenArrow);
    //inst.direction = point_direction(other.x,other.y,x,y);
    //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
    var hspd = speed * cos(direction*pi/180)
    var vspd = speed * -sin(direction*pi/180)
    var tangent = 180 - point_direction(other.x,other.y,x,y);
    inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
    inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*TweenStop(pulse);
TweenStop(roll);
damaging = true;
speed = -speed;
if(attackReset)
{
    objGate.HP -= 25;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTroll">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//if(TweenStop(pulse))
//{
//    TweenPlay(pulse);
//    TweenPlay(roll);
//}

roll = TweenCreate(self, image_angle__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,0,360);
pulse = TweenCreate(self, speed__,EaseLinear,TWEEN_MODE_ONCE,false,0,60,baseEnemySpeed*4,0);

TweenPlay(roll)//, image_angle__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,0,360);
TweenPlay(pulse)//, x__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,x,x-60);

if(audio_is_playing(sndBoulder))
{
    audio_stop_sound(sndBoulder)
    audio_play_sound(sndBoulder,0,false);
}
else
{
    audio_play_sound(sndBoulder,0,false);
}

//roll = TweenNull();
//pulse = TweenNull();*/
speed = 0;
/*if(attacking)
{
    TweenStop(roll);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with parent Troll
//if(TweenStop(pulse))
//{
//    TweenPlay(pulse);
//    TweenPlay(roll);
//}

roll = TweenCreate(id, image_angle__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,0,360);
pulse = TweenCreate(id, speed__,EaseLinear,TWEEN_MODE_ONCE,false,0,60,baseEnemySpeed*4,0);

TweenPlay(roll)//, image_angle__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,0,360);
TweenPlay(pulse)//, x__,EaseOutQuad,TWEEN_MODE_ONCE,false,0,60,x,x-60);

if(audio_is_playing(sndBoulder))
{
    audio_stop_sound(sndBoulder)
    audio_play_sound(sndBoulder,0,false);
}
else
{
    audio_play_sound(sndBoulder,0,false);
}

//roll = TweenNull();
//pulse = TweenNull();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
