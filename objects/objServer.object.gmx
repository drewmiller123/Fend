<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start Server
//hostPort = 7777;
if(objTextBoxPort.port == "")
{
    hostPort = 7777;
}
else
{
    hostPort = real(objTextBoxPort.port);
}
server = network_create_server(network_socket_udp,hostPort,3);
buffer = buffer_create(1024,buffer_fixed,1);
drawBuffer = buffer_create(32768,buffer_grow,1);
playerBuffer = buffer_create(32768,buffer_grow,1);
socketList = ds_list_create();
ipList = ds_list_create();
portList = ds_list_create();

numClients = 0;

currMusic = sndShopSong;

needReady = false;

sendState = 0;

mTimeout[1] = 300;
mTimeout[2] = 300;
mTimeout[3] = 300;
//timeout = false;
errMsg = "";

mStateAck[1] = false;
mStateAck[2] = false;
mStateAck[3] = false;

///Send request to IP service
async_event = http_get( "http://ipv4bot.whatismyipaddress.com/" );
myIP = "";
showIP = false;

lobbyCounter = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(buffer);
ds_list_destroy(socketList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send lobby stats every half second while in the lobby

if(room == rmLobby)
{
    scrSendLobbyStats();
    alarm[1] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timeout Go To Main Menu
room_goto(rmMainMenu);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send player data to ALL attached clients


if(!instance_exists(objPause))
{
    // Once a frame, we send ALL attached clients, ALL game sprites (plaeyrs and baddies)
    var count = ds_list_size(socketList);
    
    if(count &gt; 0)
    {
        /// Send all sprites to all clients
        
        // Reset buffer to start - Networking ALWAYS reads from the START of the buffer
        buffer_seek(drawBuffer, buffer_seek_start, 0);
    
        buffer_write(drawBuffer, buffer_u8, netDraw);
        
        // Total number of sprites
        buffer_write(drawBuffer, buffer_u16, 0);//gets populated later with buffCount
    
    
        //add all sprites to buffer  
        scrDrawToBuffer();
       
        buffer_poke(drawBuffer, 1, buffer_u16, buffCount);
    
        for(i=0;i&lt;count;i++)
        {   
            //if(gameSteps mod 2 == i mod 2 || count == 1)
            //{
                // get the socket
                var sock = ds_list_find_value(socketList,i);
                var ip = ds_list_find_value(ipList,i);
                var port = ds_list_find_value(portList,i);
        
                // Send all sprites to client
                network_send_udp(sock, ip, port, drawBuffer, buffer_tell(drawBuffer));  
                
                
                ////Generate and send player specific sprites separately for proper alpha adjustment////////
                buffer_seek(playerBuffer, buffer_seek_start, 0);
                buffer_write(playerBuffer, buffer_u8, netPlayerDraw);           
                // Total number of sprites
                buffer_write(playerBuffer, buffer_u16, 0);//gets populated later with playerBuffCount     
                scrDrawPlayerBuffer();
                buffer_poke(playerBuffer, 1, buffer_u16, playerBuffCount);
    
                network_send_udp(sock, ip, port, playerBuffer, buffer_tell(playerBuffer));
                playerBuffCount = 0;
            //}    
        }
        buffCount = 0;
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>mx[0] = mouse_x;
my[0] = mouse_y;
mClicked[0] = mouse_check_button(mb_left);
currArrow[0] = currentArrow;
mArrowDamage[0] = arrowDamage;
mBowSpeed[0] = bowSpeed;
mMultiShot[0] = multiShot;
mFireMult[0] = fireDamageMult;
mFrostMult[0] = frostDamageMult;
mLightningMult[0] = lightningDamageMult;

//Test
//mArrowDamage[1] = arrowDamage;
//mBowSpeed[1] = bowSpeed;
//mMultiShot[1] = multiShot;
//

if(room == rmMultiUpgrade)
{
    sendState = mUpgradeState;
    needReady = true;
}
else
{
    needReady = false;
}
if(room == rmLobby)
{
    sendState = mLobbyState;
    if(needReady == false)
    {
        needReady = true;
        //scrSendLobbyStats();
        alarm[1] = 30;
    }
}


scrSendStateUpdate();


//Send Ready Request information to clients
var count = ds_list_size(socketList);

if(count &gt; 0)
{
    //roomString = string(room == rmLobby);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u8, netReadyUpdate);
    buffer_write(buffer, buffer_bool, needReady);   
    
    for(i=0;i&lt;count;i++)
    {   

        var sock = ds_list_find_value(socketList,i);
        var ip = ds_list_find_value(ipList,i);
        var port = ds_list_find_value(portList,i);

        network_send_udp(sock, ip, port, buffer, buffer_tell(buffer));   
   
    }
}

//Check for client timeout
for(t = 0; t &lt; numClients; t++)
{
    mTimeout[t+1]--;
    if(mTimeout[t+1] &lt;= 0)
    {
        scrMultiplayerSave();
        if(errMsg == "")
        {
            errMsg = "Player " + string(t+2) + " has disconnected.##Going to Main Menu.";
            alarm[0] = 180;
            scrSendError();
        }
    }
}
/*if(timeout)
//{
    
    room_goto(rmMainMenu);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*switch(ds_map_find_value(async_load, "type"))
{
    case network_type_connect:
        var socket = ds_map_find_value(async_load,"socket");
        ds_list_add(socketList, socket);
        var ip = ds_map_find_value(async_load, "ip");
        ds_list_add(ipList, ip);
        var port = ds_map_find_value(async_load,"port");
        ds_list_add(portList, port);
    break;
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var findSocket = ds_list_find_index(socketList, socket);
        var ip = string(ds_map_find_value(async_load, "ip"));
        var findIP = ds_list_find_index(ipList, ip);
        var port = ds_map_find_value(async_load,"port");
        var findPort = ds_list_find_index(ipList, port);
        if(findSocket&gt;=0)
        {
            ds_list_delete(socketList, findSocket);
        }
        if(findIP &gt;=0)
        {
            ds_list_delete(ipList, findIP);
        }
        if(findPort &gt;= 0)
        {
            ds_list_delete(portList, findPort);
        }
    break;
    case network_type_data:*/
        var buff = ds_map_find_value(async_load, "buffer");
        var socket = ds_map_find_value(async_load, "id");
        var ip = string(ds_map_find_value(async_load, "ip"));
        var port = ds_map_find_value(async_load,"port");
        if(ds_list_find_index(ipList, ip) == -1)
        {
            ds_list_add(socketList,socket);
            ds_list_add(ipList,ip);
            ds_list_add(portList,port);
            numClients++;
        }
        //buffer_seek(buff, buffer_seek_start,0);
        scrServerReceivedPacket(buff,socket,ip,port);
    //break;
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HTTP async
//var str;

if ( ds_map_find_value(async_load, "id") == async_event ) {
    if ( ds_map_find_value(async_load, "status") == 0 ) {

        myIP = ds_map_find_value(async_load, "result");
        //show_message_async( "Your public IP address is " + str );
        //instance_destroy();

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Send Background information to clients


var count = ds_list_size(socketList);

if(count &gt; 0)
{
    //roomString = string(room == rmLobby);
    buffer_seek(buffer, buffer_seek_start, 0);
    buffer_write(buffer, buffer_u8, netBackgroundUpdate);
    buffer_write(buffer, buffer_u16, background_index[0]);
    buffer_write(buffer, buffer_u16, day);
    //buffer_write(buffer, buffer_string, sound_get_name(currMusic));
    
    
    for(i=0;i&lt;count;i++)
    {   

        var sock = ds_list_find_value(socketList,i);
        var ip = ds_list_find_value(ipList,i);
        var port = ds_list_find_value(portList,i);

        network_send_udp(sock, ip, port, buffer, buffer_tell(buffer));   
   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(server);
buffer_delete(buffer);
ds_list_destroy(socketList);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_text(5, 5, "Server Status: "+ string(server &gt;= 0));
draw_text(5, 30, "Total Clients: " + string(ds_list_size(socketList)));
draw_text(5, 55, "MultiplayerGold: " + string(multiplayerGold));
draw_text(5, 80, "needReady: " + string(needReady));
//draw_text(5, 105, "MultiplayerGold: " + string(multiplayerGold));

if(room == rmLobby &amp;&amp; showIP)
{
    scrDrawTextOutline("IP Address:" + myIP,objIPButton.x-objIPButton.sprite_width/2,objIPButton.y-objIPButton.sprite_height*3/4,c_white,c_black);
}
//draw_text(5, 80, "clientY: " + string(displayy));
//draw_text(5, 105, "clientClicked: " + string(displayClicked));

if(errMsg != "")
{
    draw_set_halign(fa_center);
    scrDrawTextOutline(errMsg,view_wview[0]/2,view_hview[0]/2,c_white,c_black);
    draw_set_halign(fa_left);
}

//display player stats in the lobby
if(room == rmLobby)
{

    

    draw_set_font(fntArrowUpgrade);
    draw_set_valign(fa_middle);
    var sp = view_hview[0] * 32/135;
    var vSpacing = view_hview[0] * 4/27;
    var spacing = sprite_get_width(sprDamageUpgrade)/3;
    for(d = 0; d &lt;= numClients; d++)
    {
        var multiSprite = scrGetMultiSprite(mMultiShot[d]);
        
        draw_sprite(sprLobbyPlayer, (d == 0), view_wview[0]/32, sp + d*vSpacing);
        
        draw_sprite(sprPlayerArcherDisplay,lobbyCounter*mBowSpeed[d],view_wview[0]/16, sp + d*vSpacing)
        scrDrawTextOutline("Player " + string(d+1) ,view_wview[0]/16+sprite_get_width(sprPlayerArcherDisplay), sp + d*vSpacing - string_height("Player"),c_white,c_black);
        
        //gold
        draw_sprite(sprBigCoin, lobbyCounter/2, view_wview[0]/16+sprite_get_width(sprPlayerArcherDisplay), sp + d*vSpacing + string_height("Player"));
        scrDrawTextOutline(scrSimplifyNum(mGold[d]), view_wview[0]/16+sprite_get_width(sprPlayerArcherDisplay) + sprite_get_width(sprBigCoin), sp + d*vSpacing + string_height("Player"),c_yellow,c_black);
        
        draw_sprite_ext(sprDamageUpgrade,0,view_wview[0]/4, sp + d*vSpacing,.5,.5,0,c_white,1);
        scrDrawTextOutline(string(mArrowDamage[d]), view_wview[0]/4 + spacing,sp + d*vSpacing,c_white,c_black);
        draw_sprite_ext(multiSprite,0, view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string(mMultiShot[d]), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite_ext(sprFireDisplay,0,view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*2, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string_replace_all(string(mFireMult[d]),"0",""), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*2 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite_ext(sprFrostDisplay,0,view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*3, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string_replace_all(string(mFrostMult[d]),"0",""), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*3 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite_ext(sprLightningDisplay,0,view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*4, sp + d*vSpacing, .5,.5,0,c_white,1);
        scrDrawTextOutline(string_replace_all(string(mLightningMult[d]),"0",""), view_wview[0]/4 + sprite_get_width(sprDamageUpgrade)*5/4*4 + spacing, sp + d*vSpacing,c_white,c_black);
        
        draw_sprite(sprReady, mReady[d], view_wview[0] * 43/60, sp + d*vSpacing);
        
    }
    lobbyCounter++;
    draw_set_valign(fa_top);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
