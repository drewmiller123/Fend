<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objBattleFieldControlParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    scrMultiplayerSave();
    if(day &gt; 90)
    {
        endlessGoldScaling = 2;
        //frostDamageMult = 2.5;
        //frostFireUpgrade = true;
        //lightningDamageMult = 3;
        //frostFireLightningUpgrade = true;
    }
    else if(day &gt; 70)
    {
        endlessGoldScaling = 2;
        //frostDamageMult = 2.5;
        //frostFireUpgrade = true;
        //frostFireLightningUpgrade = true;
    }
    else if(day &gt; 40)
    {
        endlessGoldScaling = 1.9;
    }
    if(day &gt; 50)
    {
        //fireDamageMult = 10;
    }
    
    
    damageTotal = 0;
    multiplayerGold = 0;
    mDamageDealt[0] = 0;
    mDamageDealt[1] = 0;
    mDamageDealt[2] = 0;
    mDamageDealt[3] = 0;    
    mDamagePercentage[0] = 0;
    mDamagePercentage[1] = 0;
    mDamagePercentage[2] = 0;
    mDamagePercentage[3] = 0;
    
    currentWave = 0;
    randomize();
    numWaves = max(3, min(((day-1) mod 10)-1+irandom(2), 9));
    randomize();
    maxEnemies = (day-1) mod 10;//this is multiplied by numClients later and doesn't need scaling
    maxMages = (((day-1) div 10) + 1)*objServer.numClients;
    
    enemies[numWaves] = noone;
    
    numBosses = 0;
    
    scrGenerateMultiEnemies();
    
    //Create ObjEnemyWave for each entry in waves[day]
    /*var i = 0;
    while(i &lt; numWaves)
    {
        var numEnemies = string_length(enemies[i]);
        for(j = 0; j&lt;numEnemies; j++)
        {
            scrCreateEndlessWave(enemies[i], j, i);
        }
        i++;
    }*/
    
    
    
    //scrSpawnEnemies(1);
    for(i = 0; i&lt;numWaves;i++)
    {
        alarm[i] = waveDelay*i + 1;
    }
    
    
    minFPS = 10000;
    
    coin = instance_create(x,y,objDisplayCoin);
    carnageState = false;
    carnage = noone;
    carnageList[0] = noone;
    carnageObjects[0] = noone;
    carnageCount = 0;
    carnageTimer = 0;
    carnageGold = 0;
    carnagePointer = 0;
    carnageInterval = 15;
    displayx = 0;
    displayy = 0;
    accCheck = -1;
    
    
    //Set Palette Indices 
    var chap1 = ((day - 1) div 10) mod 3;
    //var chap2 = (((day - 1) div 10)-1) mod 3;
    //var chap3 = (((day - 1) div 10)-2) mod 3;
    footPalIndex = chap1;
    trollPalIndex = chap1;
    magePalIndex = chap1;
    dragonPalIndex = chap1;
    snowManPalIndex = chap1;
    icePalIndex = chap1;
    zeusPalIndex = chap1;
    
    
    /*if(day &gt;= 15)
    {
        background_index[0] = bgSnowy;
    }
    else
    {
        background_index[0] = bgGrassy;
    }*/
    
    
    ///Theme
    if((day + 1) mod 22 &gt; 11)
    {
        scrPlayMusic(sndSnowSong);
        //if(!sound_isplaying(sndSnowSong))
        //{
            /*audio_stop_sound(sndBattlefieldSong);
            audio_stop_sound(sndShopSong);
            audio_play_sound(sndSnowSong,0,true);*/
            //currMusic = sndSnowSong;
            
        //}
        background_index[0] = bgSnowy;
    }
    else
    {
        /*audio_stop_sound(sndSnowSong);
        audio_stop_sound(sndShopSong);
        audio_play_sound(sndBattlefieldSong,0,true);*/
        //currMusic = sndBattlefieldSong;
        scrPlayMusic(sndBattlefieldSong);
        
        background_index[0] = bgGrassy;
    }
    
    if(frostFireUpgrade)
    {
        with(objFrostSelecter)
        {
            instance_create(x,y,objFrostFireSelecter);
            instance_destroy();
        }
    }
    if(frostFireLightningUpgrade)
    {
        with(objLightningSelecter)
        {
            instance_create(x,y,objFrostFireLightningSelecter);
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_stop_sound(sndBattlefieldSong);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrAccumulateGold(carnageList[carnagePointer])
carnagePointer++;
if(carnagePointer &lt; carnageCount)
{
    alarm[11] = carnageInterval;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(9);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(8);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(7);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(6);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(5);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(4);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(3);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(2);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(1);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrSpawnEndless(0);
currentWave++;

if(hosting)
{
    scrSendWaveUpdate();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    if(debug_mode)
    {
        if(fps_real &gt;= 0)
        {
            minFPS = min(minFPS,fps_real);
        }
    }
    
    escape = keyboard_check_pressed(vk_escape);
    q = keyboard_check_pressed(ord('Q'));
    w = keyboard_check_pressed(ord('W'));
    e = keyboard_check_pressed(ord('E'));
    r = keyboard_check_pressed(ord('R'));
    
    if(!instance_exists(objEnemyParent) &amp;&amp; !carnageState)
    {
        if(currentWave == numWaves)
        {
            //day++;
            //scrSaveGame();
            carnageState = true;
            carnageInterval = max(1,min(180/carnageCount,15));
            alarm[11] = carnageInterval;
            with(objBowParent)
            {
                carnageState = true;
            }
            //room_goto(rmUpgrade);
        }
        for(i = 0; i &lt; numWaves-currentWave; i++)
        {
            alarm[currentWave+i] = i*waveDelay + 1;
        }
    }
    
    if(carnageState)
    {
        if(!instance_exists(carnage))
        {
            carnage = instance_create(view_wview[0]/2,view_hview[0]/2,objMultiplayerCarnage);
            for(j = 0; j &lt;= carnageCount; j++)
            {
                carnageObjects[j] = noone;
            }
        }
        objServer.sendState = mCarnageState;
        /*mNewGold[0] = round((mDamageDealt[0]/mDamageTotal)*multiplayerGold);
        mNewGold[1] = round((mDamageDealt[1]/mDamageTotal)*multiplayerGold);
        mNewGold[2] = round((mDamageDealt[2]/mDamageTotal)*multiplayerGold);
        mNewGold[3] = round((mDamageDealt[3]/mDamageTotal)*multiplayerGold);*/
        
        if(instance_exists(objCarnageReport))
        {
            scrCreateCarnageObjects();
            //scrDisplayCarnage();
        }
    }
    else
    {
        objServer.sendState = mBattleFieldState;
    }
    
    if(escape)
    {
        if(instance_exists(objClientPause))
        {
            with(objClientPause)
            {
                instance_destroy();
            }
        }
        else if(carnageState)
        {
            room_goto(rmMultiUpgrade);
        }
        else
        {
            instance_create(view_wview[0]/2,view_hview[0]/2,objClientPause);
        }
    }
    
    
    if(mouse_wheel_up())
    {
        scrGetScrollUpArrow();
    }
    else if(mouse_wheel_down())
    {
        scrGetScrollDownArrow();
    }
    
    if(q)
    {
        //currArrow[0] = objArrow;
        currentArrow = objArrow;
    }
    if(w &amp;&amp; fireUpgrade)
    {
        //currArrow[0] = objFireArrow;
        currentArrow = objFireArrow;
    }
    if(e &amp;&amp; (frostUpgrade || frostFireUpgrade))
    {
        if(frostFireUpgrade)
        {
            //currArrow[0] = objFrostFireArrow;
            currentArrow = objFrostFireArrow;
        }
        else
        {
            //currArrow[0] = objIceArrow;
            currentArrow = objIceArrow;
        }
    }
    if(r &amp;&amp; (lightningUpgrade || frostFireLightningUpgrade))
    {
        if(frostFireLightningUpgrade)
        {
            //currArrow[0] = objFrostFireLightningArrow;
            currentArrow = objFrostFireLightningArrow;
        }
        else
        {
            //currArrow[0] = objLightningArrow;
            currentArrow = objLightningArrow;
        }
    }
    gameSteps++;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(carnageState)
{
    day++;
    if(multiplayerMode)
    {
        if(hosting)
        {
            scrMultiplayerSave();
        }
    }
    else
    {
        scrSaveGame();
    }
}
//audio_stop_sound(sndBattlefieldSong);


scrPlayMusic(sndShopSong);
/*audio_stop_sound(sndSnowSong);
audio_stop_sound(sndBattlefieldSong);
audio_play_sound(sndShopSong,0,true);*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    scrMultiplayerSave();
}
oldGold = gold;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    if(debug_mode)
    {
        draw_set_halign(fa_left);
        scrDrawTextOutline("FPS = " + string(fps_real),32,32, c_white,c_black);
        scrDrawTextOutline("#Min FPS = " + string(minFPS),32,32, c_white,c_black);
        if(is_string(enemies[currentWave-1]))
        {
            scrDrawTextOutline("##Enemies[" + string(currentWave-1) + "] = " + enemies[currentWave-1] ,32,32, c_white,c_black);
        }
        //scrDrawTextOutline("##carnageState?: " + string(carnageState),32,32, c_white,c_black);
        //scrDrawTextOutline("####objCarnage?: " + string(instance_exists(objCarnage)),32,32, c_white,c_black);
        //scrDrawTextOutline("####mainMenuButton?: " + string(instance_exists(objMainMenuButton)),32,32, c_white,c_black);
        
        
    }
    
    
    
    draw_set_font(fntDamageUpgrade);
    draw_set_halign(fa_left);
    //Day
    scrDrawTextOutline("Day:" + string(day),view_xview[0]+32,32,c_white,c_black);
    //Gold
    //scrDrawTextOutline("Gold: ",view_wview[0]/2 - sprite_get_width(sprInfoTextBox)/2 + 10,32,c_yellow,c_black);
    draw_set_halign(fa_right);
    scrDrawTextOutline(string(gold),view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 10,32,c_yellow,c_black);
    if(instance_exists(coin))
    {
        coin.x = view_wview[0]/2 + sprite_get_width(sprInfoTextBox)/2 - 20 - coin.sprite_width/2 - string_width(string(gold));
        coin.y = 46;
        coin.visible = true;
    }
    //Wave
    draw_set_halign(fa_right);
    scrDrawTextOutline("Wave: " + string(currentWave) + "/" + string(numWaves),view_wview[0] - 32,32,c_white,c_black);
    draw_set_halign(fa_left);
    
    ///////////CARNAGE REPORT////////////////
    if(carnageState)
    {
        /*if(accCheck != carnageTimer div 15)
        {
            
        }
        accCheck = carnageTimer div 15;*/
        if(carnageTimer div carnageInterval &lt; carnageCount)
        {
            carnageTimer++;
        }
        if(instance_exists(objCarnageReport))
        {
            var cw = sprite_get_width(sprCarnageReport);
            var ch = sprite_get_height(sprCarnageReport);
            var cx = view_wview[0]/2;
            var cy = view_hview[0]/2;//-ch/16;   
            var cshift = cw/6;
        
            draw_set_halign(fa_center);
            scrDrawTextOutline("Level Complete!", objCarnageReport.x, objCarnageReport.y - objCarnageReport.sprite_height/2 + 20, c_white, c_black)
            
            draw_set_halign(fa_left);
            scrDrawTextOutline("Enemies Defeated: ", objCarnageReport.x - objCarnageReport.sprite_width/2 + 40, objCarnageReport.y - objCarnageReport.sprite_height/2 + 60, c_white, c_black)
            
            scrDrawTextOutline("Damage# Dealt:", cx-cw/2 + 40, cy-string_height("100%")*2, c_white, c_black);
            
            scrDrawTextOutline("Total Gold Earned: ", objCarnageReport.x - objCarnageReport.sprite_width/2 + 40, objCarnageReport.y + objCarnageReport.sprite_height/4 + 20, c_yellow, c_black)
            scrDrawTextOutline(string(multiplayerGold), objCarnageReport.x - objCarnageReport.sprite_width/2 + 40 + string_width("Total Gold Earned: ") + sprite_get_width(sprBigCoin), objCarnageReport.y + objCarnageReport.sprite_height/4 + 20, c_yellow, c_black)
            
            scrDrawTextOutline("Your Cut: ", objCarnageReport.x - objCarnageReport.sprite_width/2 + 40, objCarnageReport.y + objCarnageReport.sprite_height/4 + 60, c_yellow, c_black)
            scrDrawTextOutline(string(mNewGold[0]), objCarnageReport.x - objCarnageReport.sprite_width/2 + 40 + string_width("Your Cut: ") + sprite_get_width(sprBigCoin), objCarnageReport.y + objCarnageReport.sprite_height/4 + 60, c_yellow, c_black)
            //scrDisplayCarnage();
            
            draw_set_halign(fa_center);
            scrDrawTextOutline(string(round(mDamagePercentage[0]*100)) + "%", cx-cw/2 + cshift*2, cy-string_height("100%"), c_lime, c_black);
            scrDrawTextOutline("P1", cx-cw/2 + cshift*2, cy+string_height("100%")/2, c_lime, c_black);
            for(i=0; i&lt;objServer.numClients; i++)
            {
                scrDrawTextOutline(string(round(mDamagePercentage[i+1]*100)) + "%", cx-cw/2 + cshift*(i+3), cy-string_height("100%"), c_white, c_black);
                scrDrawTextOutline("P" + string(i+2), cx-cw/2 + cshift*(i+3), cy+string_height("100%")/2, c_white, c_black);
            }
            draw_set_color(c_white);
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
