<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPeasant</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(endlessMode)
{
    maxHP = 10 * power(endlessHPScaling,(day - 1) div 10);
    worth = floor(2 * power(endlessGoldScaling,(day - 1) div 10));
}
else
{
    maxHP = 10 * power(HPScaling,(day - 1) div 10);
    worth = 1 * power(goldScaling,(day - 1) div 10);
}

HP = maxHP
speed = baseEnemySpeed;
startingSpeed = speed;
image_index = irandom(image_number-1);
image_speed = .25;
startingImageSpeed = image_speed;

attackDamage = 1;
attacking = false;
attackReset = true;
pickingUpSword = false;
pickingUpShield = false;

burning = false;
burnTimer = 0;
timeBurning = 0;
fire = noone;
chilled = false;
chillTimer = 0;
frost = noone;

body = noone;
target = noone;

hpBar = instance_create(x, y+sprite_height/2 + 8, objHPBar);
hpBar.owner = id;
hpBar.image_xscale = sprite_width/2 / hpBar.sprite_width;
hpBar.image_yscale = 6 / hpBar.sprite_height;

firePlayer = 0;
lightningPlayer = 0;
//squished = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gold += worth;
with(fire)
{
    instance_destroy();
}
with(frost)
{
    instance_destroy();
}
with(hpBar)
{
    instance_destroy();
}
scrCoinSplosion();

//Add to carnage report
event_perform(ev_other,ev_user10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/////////Determine State////////////////




////////////////////////////////////////
if((!place_meeting(x,y,objDeadPickupParent)||!instance_exists(target)) &amp;&amp; !attacking)
{
    sprite_index = sprPeasant;
    speed = startingSpeed;
    pickingUpSword = false;
    pickingUpShield = false;
    target = noone;
}

//Pickup Dead Enemy's Item
if(place_meeting(x,y,objDeadPickupParent))
{
    if(!instance_exists(target))
    {
        target = instance_nearest(x,y,objDeadPickupParent);
    }
    ///Pick up Swoard Animation
    if(target.object_index == objFootSoldierDead &amp;&amp; (x == target.x - 30 || pickingUpSword))// || (instance_exists(body) &amp;&amp; object_get_name(body) == "objFootSoldierDead"))//pickingUpSword == true) &amp;&amp; pickingUpShield == false)
    {
        if(pickingUpSword == false)
        {
            //if(!instance_exists(body))
            //{
            //    body = other;
            //}
            pickingUpSword = true;
            pickingUpShield = false;
            speed = 0;    
            //audio_play_sound(sndPeasantPickup,0,false);
        }
        if(sprite_index != sprSwordPickup &amp;&amp; sprite_index != sprPickup)
        {
            sprite_index = sprSwordPickup;
            image_index = 0;
        }
        if(image_index == 5)
        {
            if(instance_exists(target))
            {
                var inst = instance_create(x,y,objFootSoldier);
                
                inst.burning = burning;
                inst.burnTimer = burnTimer;
                if(burning)
                {
                    inst.fire = instance_create(x,y,objFireEffect);
                    inst.fire.paletteIndex = fire.paletteIndex;
                }
                inst.chilled = chilled;
                inst.chillTimer = chillTimer;
                if(chilled)
                {
                    inst.frost = instance_create(x,y,objFrostEffect);
                    inst.frost.image_xscale = inst.sprite_width/inst.frost.sprite_width;
                    inst.frost.image_yscale = inst.sprite_height/inst.frost.sprite_height;
                }
                inst.maxHP = maxHP;
                inst.HP = HP;
                inst.worth = worth;
                
                with(target)
                {
                    var pez = instance_create(x,y,objPeasantDead);
                    pez.image_index = image_index;
                    pez.image_speed = image_speed;
                    instance_destroy();
                }
                worth = 0;
                //audio_play_sound(sndPeasantPickup,0,false);
                scrPlayAudio(sndPeasantPickup);
                instance_destroy();
            }
            else
            {
                sprite_index = sprPeasant;
                pickingUpSword = false;
                speed = startingSpeed;
            }
        }
    }
    //Pick up shield Animation
    else if(target.object_index == objShieldHolderDead &amp;&amp; (x == target.x - 30 || pickingUpShield))// || (instance_exists(body) &amp;&amp; object_get_name(body) == "objShieldHolderDead"))//pickingUpShield == true) &amp;&amp; pickingUpSword == false)
    {
        if(pickingUpShield == false)
        {
            //if(!instance_exists(body))
            //{
            //    body = other;
            //}
            pickingUpShield = true;
            pickingUpSword = false;
            speed = 0;    
            //audio_play_sound(sndPeasantPickup,0,false);
        }
        if(sprite_index != sprPickup)// &amp;&amp; sprite_index != sprSwordPickup)
        {
            sprite_index = sprPickup;
            image_index = 0;
        }
        if(image_index == 5)
        {
            if(instance_exists(target))
            {
            var inst = instance_create(x,y,objShieldHolder);
            
            inst.burning = burning;
            inst.burnTimer = burnTimer;
            if(burning)
            {
                inst.fire = instance_create(x,y,objFireEffect);
                inst.fire.paletteIndex = fire.paletteIndex;
            }
            inst.chilled = chilled;
            inst.chillTimer = chillTimer;
            if(chilled)
            {
                inst.frost = instance_create(x,y,objFrostEffect);
                inst.frost.image_xscale = inst.sprite_width/inst.frost.sprite_width;
                inst.frost.image_yscale = inst.sprite_height/inst.frost.sprite_height;
            }
            inst.maxHP = maxHP;
            inst.HP = HP;
            inst.worth = worth;
            //Get shield health value from dead shield holder
            //inst.shield.HP = target.shieldHP;//I'm surprised this works.
            
            with(target)
            {
                var pez = instance_create(x,y,objPeasantDead);
                pez.image_index = image_index;
                pez.image_speed = image_speed;
                instance_destroy();
            }
            worth = 0;
            //audio_play_sound(sndPeasantPickup,0,false);
            scrPlayAudio(sndPeasantPickup);
            instance_destroy();
            }
            else
            {
                sprite_index = sprPeasant;
                pickingUpShield = false;
                speed = startingSpeed;
            }
        }
    }
}

//Shield Pickup
/*if(place_meeting(x,y,objShieldHolderDead))
{
    if(!instance_exists(target))
    {
        target = instance_nearest(x,y,objDeadPickupParent);
    }
    ///Pick up Shield Animation
    else if(x == target.x - 30 &amp;&amp; target == objShieldHolderDead)// || (instance_exists(body) &amp;&amp; object_get_name(body) == "objShieldHolderDead"))//pickingUpShield == true) &amp;&amp; pickingUpSword == false)
    {
        if(pickingUpShield == false)
        {
            //if(!instance_exists(body))
            //{
            //    body = other;
            //}
            pickingUpShield = true;
            pickingUpSword = false;
            speed = 0;    
            //audio_play_sound(sndPeasantPickup,0,false);
        }
        if(sprite_index != sprPickup)// &amp;&amp; sprite_index != sprSwordPickup)
        {
            sprite_index = sprPickup;
            image_index = 0;
        }
        if(image_index == 5)
        {
            if(instance_exists(target))
            {
            var inst = instance_create(x,y,objShieldHolder);
            
            inst.burning = burning;
            inst.burnTimer = burnTimer;
            if(burning)
            {
                inst.fire = instance_create(x,y,objFireEffect);
            }
            inst.chilled = chilled;
            inst.chillTimer = chillTimer;
            if(chilled)
            {
                inst.frost = instance_create(x,y,objFrostEffect);
                inst.frost.image_xscale = inst.sprite_width/inst.frost.sprite_width;
                inst.frost.image_yscale = inst.sprite_height/inst.frost.sprite_height;
            }
            inst.maxHP = maxHP;
            inst.HP = HP;
            inst.worth = worth;
            //Get shield health value from dead shield holder
            inst.shield.HP = target.shieldHP;//I'm surprised this works.
            
            with(target)
            {
                var pez = instance_create(x,y,objPeasantDead);
                pez.image_index = image_index;
                pez.image_speed = image_speed;
                instance_destroy();
            }
            worth = 0;
            audio_play_sound(sndPeasantPickup,0,false);
            instance_destroy();
            }
            else
            {
                sprite_index = sprPeasant;
                pickingUpShield = false;
                speed = startingSpeed;
            }
        }
    }
}*/

//Attack Gate
if(!instance_exists(objGate))
{
    attacking = false;
    if(!pickingUpSword &amp;&amp; !pickingUpShield)
    {
        sprite_index = sprPeasant;
        speed = startingSpeed;
    }
}
else if(place_meeting(x,y,objGate))
{
    attacking = true;
    speed = 0;
    sprite_index = sprPeasantAttack;
    if(image_index == 0)
    {
        attackReset = true;
    }
    if(image_index == 6 &amp;&amp; attackReset)
    {
        attackReset = false;
        objGate.HP -= attackDamage;
        HP -= maxHP/10;
    }
}

if(burning)
{
    if(instance_exists(fire))
    {
        fire.x = x;
        fire.y = y;
    }
    
    burnTimer--;
    timeBurning++;
    if(timeBurning mod 30 == 0)
    {
        if(hosting)
        {
            var dam = mArrowDamage[firePlayer]*mFireMult[firePlayer];
            HP -= dam;
            mDamageTotal += dam;
            mDamageDealt[firePlayer] += dam;            
        }
        else
        {
            HP -= arrowDamage*fireDamageMult;//(burnDuration/30);
        }
    }    
    if(burnTimer &lt;= 0)
    {
        burning = false;
        timeBurning = 0;
        with(fire)
        {
            instance_destroy();
        }
    }
}
else
{
    timeBurning = 0;
    with(fire)
    {
        instance_destroy();
    }
}

if(chilled)
{
    if(instance_exists(frost))
    {
        frost.x = x;
        frost.y = y;
    }
    
    chillTimer--;
    if(image_speed != startingImageSpeed/2)
    {
        image_speed = startingImageSpeed/2;
        image_index = ceil(image_index);
    }
    
    if(speed != 0)
    {
        speed = startingSpeed/2;
    }
    
    if(chillTimer == 0)
    {
        chilled = false;
        image_speed = startingImageSpeed;
        image_index = ceil(image_index);
        if(speed != 0)
        {
            speed = startingSpeed;
        }
        with(frost)
        {
            instance_destroy();
        }
    }
}
else
{
    with(frost)
    {
        instance_destroy();
    }
}

if(instance_exists(hpBar))
{
    hpBar.x = x;
    hpBar.y = y + sprite_height/2 + 8;
}

if(HP &lt;= 0)///this was at top which could cause problems 9/6
{
    var inst = instance_create(x,y,objPeasantDead);
    //inst.squished = squished;
    var snd = choose(sndSoldierDeath1, sndSoldierDeath2);
    //audio_play_sound(snd, 0, false);
    scrPlayAudio(snd);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
if(hosting)
{
    lightningPlayer = other.player;
    inst.player = lightningPlayer;
}
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
if(hosting)
{
    lightningPlayer = other.player;
    inst.player = lightningPlayer;
}
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objIceArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = (mArrowDamage[other.player]/2 + mArrowDamage[other.player]*mFrostMult[other.player]);
    HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[other.player] += dam;
}
else
{
    HP -= (arrowDamage/2 + arrowDamage*frostDamageMult);
}
//x += 1;
//event_perform(ev_other, ev_user14)//handle chilling
chilled = true;
chillTimer = chillDuration;
if(!instance_exists(frost))
{
    frost = instance_create(x,y,objFrostEffect);
    frost.image_xscale = sprite_width/frost.sprite_width;
    frost.image_yscale = sprite_height/frost.sprite_height;
}
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    firePlayer = other.player;
}
event_perform(ev_collision, objFireArrow);
fire.paletteIndex = 1;
event_perform(ev_collision, objIceArrow);
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = mArrowDamage[other.player]/2;
    HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[other.player] += dam;
    firePlayer = other.player;
}
else
{
    HP -= arrowDamage/2;
}
//x += 1;
burning = true;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x,y,objFireEffect);
}
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = mArrowDamage[other.player];
    HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[other.player] += dam;
}
else
{
    HP -= arrowDamage;
}
//x += 1;
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGate">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*speed = 0;
sprite_index = sprPeasantAttack;
if(image_index == 0)
{
    attackReset = true;
}
if(image_index == 6 &amp;&amp; attackReset)
{
    attackReset = false;
    objGate.HP -= attackDamage;
    HP -= 1;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(HP &lt; maxHP)
//{
//    draw_healthbar(x-sprite_width/4,y+sprite_height/2+4,x+sprite_width/4,y+sprite_height/2+8,HP/maxHP*100,c_black,c_red,c_red,0,true,true);
//}

/*if(burning)
{
    //draw_set_blend_mode(bm_add);
    //draw_sprite_ext(sprFootSoldier, image_index, x, y, 1, 1, 0, c_red, 0);
    //draw_set_blend_mode(bm_normal);
    //draw_self();
    d3d_set_fog(true,c_red,0,0);
    draw_sprite_ext(sprFootSoldier, image_index, x, y, 1.05, 1.05, 0, c_black, 0);
    draw_self();
    d3d_set_fog(false,c_black,0,0);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(burning)
//{
    //shader_set(shdBurn);
    //shader_params = shader_get_uniform(shdTest, "colorIn0");
    //shader_set_uniform_f(shader_params, c_black);
    //draw_self();
    //shader_reset();
    //draw_sprite_ext(sprFootSoldierEffectMask,image_index,x,y,1,1,0,c_red,.5);
    //draw_set_blend_mode(bm_add);
    
    //draw_set_blend_mode(bm_normal);
    //d3d_set_fog(true,c_red,0,0);
    //draw_sprite_ext(sprPeasant, image_index, x, y, 1.1, 1.1, 0, c_white, 1);
    //draw_self();
    //d3d_set_fog(false,c_black,0,0);
    //draw_self();
    //draw_sprite_ext(sprPeasant, image_index, x, y, 1.1, 1.1, 0, c_white, 1);
//}
//else
//{
pal_swap_set(sprFootPal,footPalIndex,false);
    draw_self()
pal_swap_reset();
//}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
