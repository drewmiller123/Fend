<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprMenuButton</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(multiplayerMode)
{
    if(hosting)
    {
        
        mReady[0] = true;
        mGold[0] = gold;
        scrSendLobbyStats();
        if(room == rmLose)
        {
            room_goto(rmMultiUpgrade);
        }
        else
        {
            room_goto(rmLobby);
        }
    }
    else
    {
        objClient.subState = 1;
        with(objClient)
        {
            buffer_seek(buffer, buffer_seek_start,0);
            buffer_write(buffer, buffer_u8,netStatUpdate);
            buffer_write(buffer, buffer_u32, gold);
            buffer_write(buffer, buffer_u16, arrowDamage);
            buffer_write(buffer, buffer_u8, multiShot);
            buffer_write(buffer, buffer_u16, bowSpeed*1000);
            buffer_write(buffer, buffer_u16, fireDamageMult*100);
            buffer_write(buffer, buffer_u16, frostDamageMult*100);
            buffer_write(buffer, buffer_u16, lightningDamageMult*100);
            network_send_udp(socket, IPAddress, remotePort, buffer, buffer_tell(buffer));
            alarm[0] = 30;
            
            //send ready update
            buffer_seek(buffer, buffer_seek_start,0);
            buffer_write(buffer, buffer_u8,netReadyUpdate);
            buffer_write(buffer, buffer_bool, true);
            result = network_send_udp(socket, IPAddress, remotePort, buffer, buffer_tell(buffer));
        }
        objClient.currentState = mLobbyState;
        room_goto(rmClientBattleField);
    }
}
else if(endlessMode)
{
    room_goto(rmEndlessBattleField);
}
else
{
    room_goto(rmBattleField);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(fntUpgrade);
draw_set_halign(fa_center);
if(room == rmLose)
{
    scrDrawTextOutline("Retry?",x,y-sprite_width/32,c_white,c_black)
    
}
else
{
    scrDrawTextOutline("Continue",x,y-sprite_width/32,c_white,c_black)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
