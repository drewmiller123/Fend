<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprTrollWalking</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(endlessMode)
{
    maxHP = 250 * power(endlessHPScaling,(day - 1) div 10);
    worth = floor(50 * power(endlessGoldScaling,(day - 1) div 10));
}
else
{
    maxHP = 250 * power(HPScaling,(day - 1) div 10);
    worth = 50 * power(goldScaling,(day - 1) div 10);
}

HP = maxHP;
speed = baseEnemySpeed/2;
startingSpeed = speed;
image_speed = 1;
startingImageSpeed = image_speed;
//image_speed = .17;
depth = 11;
x += sprite_get_width(sprTrollBoulder);
//y-=sprite_width/2;


burning = false;
burnTimer = 0;
timeBurning = 0;
fire = noone;

chilled = false;
chillTimer = 0;
frost = noone;

boulder = instance_create(x-sprite_width,y,objTweenBoulder);
boulder.depth = 9;
boulder.troll = id;

push = TweenNull();

baseWidth = sprite_get_width(sprTroll);
baseHeight = sprite_get_height(sprTroll);

hpBar = instance_create(x, y+sprite_height/2 + 6, objHPBar);
hpBar.owner = id;
hpBar.image_xscale = sprite_width/2 / hpBar.sprite_width;
hpBar.image_yscale = 6 / hpBar.sprite_height;


//tween = TweenFire(self,image_index__,EaseLinear, TWEEN_MODE_LOOP, false, 0, 106, 0, image_number);
//TweenPlay(tween);

firePlayer = 0;
lightningPlayer = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(boulder)
{
    instance_destroy();
}

with(fire)
{
    instance_destroy();
}
with(frost)
{
    instance_destroy();
}

gold += worth;
scrCoinSplosion();

//Add to carnage report
event_perform(ev_other,ev_user10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>

/*if(x &lt; view_xview[0])
{
    with(boulder)
    {
        instance_destroy();
    }
    instance_destroy();
}*/

if(instance_exists(boulder))
{
    if(boulder.damaging == true)
    {
        speed = 0;
    }
}
else
{
    speed = startingSpeed;
}
if(!instance_exists(objGate))
{
    speed = startingSpeed;
}

if(place_meeting(x,y,boulder))
{
    
    if( !TweenExists(push))
    {
        sprite_index = sprTrollPushing;
        image_speed = 0;
        push = TweenFire(id,image_index__,EaseLinear,TWEEN_MODE_ONCE,false,0,45,0,45);
    }
    /*if(image_index == 36)
    {
        with(boulder)
        {
            attackReset = true;
            event_perform(ev_other,ev_user0);
        }
    }*/
}

if(sprite_index == sprTrollPushing)
{
    if(image_index == 45)
    {
        if(speed &lt; 0)
        {
            sprite_index = sprTrollWalking;
            image_speed = 1;
        }
        //else
        //{
        //    image_speed = 0;
        //}
    }
    else if(image_index == 36)
    {
        with(boulder)
        {
            attackReset = true;
            event_perform(ev_other,ev_user0);
        }
    }
}

if(burning)
{
    if(instance_exists(fire))
    {
        fire.x = x+20;
        fire.y = y;
    }
    burnTimer--;
    timeBurning++;
    if(timeBurning mod 30 == 0)
    {
        if(hosting)
        {
            var dam = mArrowDamage[firePlayer]*mFireMult[firePlayer];
            HP -= dam;
            mDamageTotal += dam;
            mDamageDealt[firePlayer] += dam;            
        }
        else
        {
            HP -= arrowDamage*fireDamageMult;//(burnDuration/30);
        }
    }
    if(burnTimer &lt;= 0)
    {
        timeBurning = 0;
        burning = false;
        with(fire)
        {
            instance_destroy();
        }
    }
}
else
{
    timeBurning = 0;
    with(fire)
    {
        instance_destroy();
    }
}

if(chilled)
{
    if(instance_exists(frost))
    {
        frost.x = x;
        frost.y = y;
    }
    
    chillTimer--;
    if(image_speed != startingImageSpeed/2 &amp;&amp; image_speed != 0)
    {
        image_speed = startingImageSpeed/2;
        image_index = floor(image_index);
    }
    
    if(speed != 0)
    {
        speed = startingSpeed/2;
    }
    
    if(chillTimer == 0)
    {
        chilled = false;
        if(image_speed != 0)
        {
            image_speed = startingImageSpeed;
        }
        image_index = ceil(image_index);
        if(speed != 0)
        {
            speed = startingSpeed;
        }
        with(frost)
        {
            instance_destroy();
        }
    }
}
else
{
    with(frost)
    {
        instance_destroy();
    }
}

if(instance_exists(hpBar))
{
    hpBar.x = x+baseWidth*13/40;
    hpBar.y = y + baseHeight/2 + 8;
}


if(HP &lt;= 0)
{
    //instance_create(x,y,objFootSoldierDead);
    //with(boulder)
    //{
    //    instance_destroy();
    //}
    var snd = choose(sndTrollDeath1, sndTrollDeath2);
    scrPlayAudio(snd);
    //audio_play_sound(snd,0,false);
    instance_create(x,y,objTrollDead);
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
if(hosting)
{
    lightningPlayer = other.player;
    inst.player = lightningPlayer;
}
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HP -= arrowDamage;
/*x += 1;
burning = true;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x,y,objFireEffect);
}*/
var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
if(hosting)
{
    lightningPlayer = other.player;
    inst.player = lightningPlayer;
}
with(inst)
{
    event_perform(ev_other,ev_user0);
}

with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objIceArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = (mArrowDamage[other.player]/2 + mArrowDamage[other.player]*mFrostMult[other.player]);
    HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[other.player] += dam;
}
else
{
    HP -= (arrowDamage/2 + arrowDamage*frostDamageMult);
}
//event_perform(ev_other, ev_user14)//handle chilling
chilled = true;
//burning = false;
chillTimer = chillDuration;
if(!instance_exists(frost))
{
    frost = instance_create(x,y,objFrostEffect);
    frost.image_xscale = sprite_width/frost.sprite_width;
    frost.image_yscale = sprite_height/frost.sprite_height;
}
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    firePlayer = other.player;
}
event_perform(ev_collision, objFireArrow);
fire.paletteIndex = 1;
event_perform(ev_collision, objIceArrow);
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = mArrowDamage[other.player]/2;
    HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[other.player] += dam;
    firePlayer = other.player;
}
else
{
    HP -= arrowDamage/2;
}
burning = true;
//chilled = false;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x+20,y+20,objFireEffect);
    fire.depth = 10;
    fire.image_xscale = 2;
    fire.image_yscale = 1.5;
}
with(other)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hosting)
{
    var dam = mArrowDamage[other.player];
    HP -= dam;
    mDamageTotal += dam;
    mDamageDealt[other.player] += dam;
}
else
{
    HP -= arrowDamage;
}
//x += 1;
with(other)
{
    
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(HP &lt; maxHP)
{
    draw_healthbar(x-baseWidth/8,y+baseHeight/2+4,x+baseWidth/2.5,y+baseHeight/2+8,HP/maxHP*100,c_black,c_red,c_red,0,true,true);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pal_swap_set(sprTrollPal,trollPalIndex,false);
draw_self();
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
