<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player = 0;
damager = instance_create(x,y,objArcDamager);
arcPointSprite = sprLightningArcPoint;
lightningArcSprite = sprLightningArc;

if(frostFireLightningUpgrade)
{
    damager.arcEvent = ev_user14;
    arcPointSprite = sprFrostFireArcPoint;
    lightningArcSprite = sprFrostFireLightningArc;
}



currentEnemy = noone;
for(i = 0; i &lt;= maxLightningJumps;i++)
{
    effectedEnemies[i] = noone;
    arcPoints[i] = noone;
    arcs[i] = noone;
}
numJumps = 0;
grounded = false;
steps = 0;

groundPoint = noone;

depth = -50;

if(audio_is_playing(sndShock))
{
    audio_sound_set_track_position(sndShock,.5);
    //audio_play_sound(sndShock,0,false);
    scrPlayAudio(sndShock);
}
else
{
    audio_sound_set_track_position(sndShock,0);
    //audio_play_sound(sndShock,0,false);
    scrPlayAudio(sndShock);
}


//event_perform(ev_other,ev_user0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(groundPoint)
{
    instance_destroy();
}
with(damager)
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(instance_exists(effectedEnemies[numJumps-1]))
{
    groundPoint.x = effectedEnemies[numJumps-1].x;
}

if(steps == 0)
{
    /*for(i = 0; i &lt;= maxLightningJumps; i++)
    {
        with(effectedEnemies[i])
        {
            //HP -= arrowDamage;
            event_perform(ev_other,other.arcEvent);
        }
    }*/
    with(damager)
    {
        player = other.player;
        event_perform(ev_other,ev_user0);
    }
    //instance_destroy();
}
if(steps &gt;=12)
{
    instance_destroy();
}

steps++;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Enemies to be Arced
effectedEnemies[0] = currentEnemy;
damager.effectedEnemies[0] = currentEnemy;
var i = 2;
var skip = false;
var skipCount = 0;
var escape = false;
while(numJumps &lt; maxLightningJumps &amp;&amp; !escape)
{
    var nextEnemy = scrGetNthNearest(objEnemyParent,currentEnemy.x,currentEnemy.y,i);
    
    /*if(!instance_exists(nextEnemy) || nextEnemy == currentEnemy)
    {
        //numJumps = maxLightningJumps;
        escape = true;
    }*/
    
    for(j = 0; j &lt; maxLightningJumps; j++)
    {
        if(nextEnemy == effectedEnemies[j])
        {
            skip = true;
            skipCount++;
            if(skipCount &gt; maxLightningJumps)
            {
                escape = true;
                //numJumps = maxLightningJumps;
            }
        }
    }
    //with(nextEnemy)
    //{
    //    instance_destroy();
    //}
    if(!skip)
    {
        if(point_distance(currentEnemy.x,currentEnemy.y,nextEnemy.x,nextEnemy.y)&lt;maxArcDistance)
        {
            currentEnemy = nextEnemy;
            if(hosting)
            {
                currentEnemy.lightningPlayer = player;
            }
            numJumps += 1;
            effectedEnemies[numJumps] = currentEnemy;
            damager.effectedEnemies[numJumps] = currentEnemy;
            i = 2;
            if(currentEnemy.object_index == objGroundedEnemy)
            {
                grounded = true;
                numJumps = maxLightningJumps;
            }
        }
        else
        {
            escape = true;
            //numJumps = maxLightningJumps;
        }
    }
    else
    {
        i++;
        skip = false;
    }
}
//if(escape)
//{
    groundPoint = instance_create(effectedEnemies[numJumps].x,988,objTempArc);
    numJumps++;
    effectedEnemies[numJumps] = groundPoint;
//}


//create objects to draw(needed for multiplayer drawing)
for(i=0;i&lt;numJumps;i++)
{
    if(instance_exists(effectedEnemies[i]) &amp;&amp; instance_exists(effectedEnemies[i+1]))
    {
        var x1 = effectedEnemies[i].x;
        var y1 = effectedEnemies[i].y;
        var x2 = effectedEnemies[i+1].x;
        var y2 = effectedEnemies[i+1].y;
        var xs = point_distance(x1, y1, x2, y2)/sprite_get_width(sprLightningArc);
        var dir = point_direction(x1,y1,x2,y2);
        //using gameSteps to determine displayed animation frame makes it look less like a beam
        //draw_sprite(arcPointSprite,gameSteps%12/2,x1,y1);
        //draw_sprite(arcPointSprite,gameSteps%12/2,x2,y2);
        //draw_sprite_ext(lightningArcSprite,gameSteps%12/2,x1,y1,xs,1,dir,c_white,1);
        arcPoints[i] = instance_create(x1,y1,objArcPoint);
        arcPoints[i].owner = effectedEnemies[i];
        arcs[i] = instance_create(x1,y1,objArcDraw);
        arcs[i].image_xscale = xs;
        arcs[i].image_angle = dir;
        arcs[i].owner = effectedEnemies[i];
    }
    /*else if(instance_exists(effectedEnemies[i]))
    {
        var x1 = effectedEnemies[i].x;
        var y1 = effectedEnemies[i].y;
    }*/
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*for(i=0;i&lt;numJumps;i++)
{
    if(instance_exists(effectedEnemies[i]) &amp;&amp; instance_exists(effectedEnemies[i+1]))
    {
        var x1 = effectedEnemies[i].x;
        var y1 = effectedEnemies[i].y;
        var x2 = effectedEnemies[i+1].x;
        var y2 = effectedEnemies[i+1].y;
        var xs = point_distance(x1, y1, x2, y2)/sprite_get_width(sprLightningArc);
        var dir = point_direction(x1,y1,x2,y2);
        //using gameSteps to determine displayed animation frame makes it look less like a beam
        draw_sprite(arcPointSprite,gameSteps%12/2,x1,y1);
        draw_sprite(arcPointSprite,gameSteps%12/2,x2,y2);
        draw_sprite_ext(lightningArcSprite,gameSteps%12/2,x1,y1,xs,1,dir,c_white,1);
    }
    
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
