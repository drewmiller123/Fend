<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprZeusIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(endlessMode)
{
    maxHP = 50 * power(endlessHPScaling,(day - 1) div 10);
    worth = floor(200 * power(endlessGoldScaling,(day - 1) div 10));
}
else
{
    maxHP = 50;
    worth = 25000 * power(goldScaling,(day - 1) div 10);
}

HP = maxHP;
speed = baseEnemySpeed*2;
gravity = 0;
//image_speed = .17;
depth = 25;
y-=sprite_height*2.6;


wiggle = 0;
lightningSpawned = false;
wet = false;
smashed = false;
recovered = false;
spawnCD = 120;
spawnCount = 0;

recoverPointx = view_wview[0]*7/8;
recoverPointy = y-sprite_height/2;

idlePointx = view_wview[0]*3/4;
idlePointy = y-sprite_height/2;

attackPointx = view_wview[0]/2 + view_wview[0]/8;
attackPointy = y-sprite_height/2;

initialState = true;
spawnState = false;
armingState = false;
attackState = false;
frozenState = false;
recoverState = false;

cloud = instance_create(x,y+sprite_height/2,objZeusCloud);
cloud.zeus = id;

cloudDark = instance_create(x,y+sprite_height/2,objDarkCloud);
cloudDark.zeus = id;
cloudDark.depth = cloud.depth - 1;

ice = noone;
bolt = noone;

hpBar = instance_create(x, y+sprite_height/2 + 8, objHPBar);
hpBar.owner = id;
hpBar.image_xscale = sprite_width/2 / hpBar.sprite_width;
hpBar.image_yscale = 6 / hpBar.sprite_height;

//audio_play_sound(sndDragonSpawn,0,false);

//boulder = instance_create(x-sprite_width,y,objTweenBoulder);
//boulder.depth = 9;

//push = TweenNull();

//tween = TweenFire(self,image_index__,EaseLinear, TWEEN_MODE_LOOP, false, 0, 106, 0, image_number);
//TweenPlay(tween);

firePlayer = 0;
lightningPlayer = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lightningUpgrade = true;
with(cloud)
{
    instance_destroy();
}
with(cloudDark)
{
    instance_destroy();
}
//with(ice)
//{
//    instance_destroy();
//}


gold += worth;

scrCoinSplosion();

//Add to carnage report
event_perform(ev_other,ev_user10);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(HP &lt;= 0)
{
    //instance_create(x,y,objFootSoldierDead);
    //audio_play_sound(sndDragonDeath,0,false);
    dead = instance_create(x,y,objZeusDead);
    //dead.ice = ice;
    
    //dead.speed = speed;
    //dead.image_xscale = image_xscale;
    instance_destroy();
}*/

if(initialState)
{
    if(x &lt; idlePointx)
    {
        speed = baseEnemySpeed*-2;
    }
    else
    {
        speed = baseEnemySpeed*2;
    }
    if(abs(x - idlePointx) &lt;= 1)
    {
        speed = 0;
        x = idlePointx;
        y = idlePointy;
        //spawnState = true;
        wet = false;
        //armingState = true;
        spawnState = true;
        initialState = false;
    }
}

if(spawnState)
{
    speed = 0;
    if(spawnCount &lt; 4 + (4 - ceil(HP/maxHP*4)))
    {
        if(spawnCD == 60)
        {
            instance_create(cloud.x+cloud.sprite_width*3/8,cloud.y,objCloudMinion);
        }
        if(spawnCD &lt;= 0)
        {
            spawnCount++;
            spawnCD = 120;
            var rand = -cloud.sprite_width/2 + irandom(cloud.sprite_width);
            instance_create(cloud.x+rand,cloud.y + cloud.sprite_height*5/8,objZeusRain); 
            //instance_create(cloud.x+cloud.sprite_width*3/8,cloud.y,objCloudMinion);  
        }
        spawnCD--;
    }
    else
    {
        spawnCount = 0;
        spawnCD = 120;
        armingState = true;
        spawnState = false;
    }
}

if(armingState)
{
    if(!lightningSpawned)
    {
        cloudDark.image_alpha += .0035;
        x = idlePointx - wiggle/2 + irandom(wiggle)
        y = idlePointy - wiggle/2 + irandom(wiggle)
        wiggle += .1;
        if(cloudDark.image_alpha &gt;= .5)
        {
            cloudDark.image_alpha = 0;
            //sprite_index = sprZeusAttack;
            //image_index = 0;
            //image_speed = 0;
            lightningSpawned = true;
            bolt = instance_create(cloud.x,cloud.y,objZeusLightning);
            bolt.vspeed = - 10;
            bolt.gravity = grav;
            x = idlePointx;
            y = idlePointy;
            wiggle = 0;
            //attackState = true;
            //armingState = false;
            wet = true;
            //speed = baseEnemySpeed*2;
        }
    }
    else
    {
        bolt.image_angle += 20;
        if(bolt.vspeed &gt; 0 &amp;&amp; bolt.y &gt; y+sprite_height/8)
        {
            sprite_index = sprZeusAttack;
            image_index = 0;
            image_speed = 0;
            attackState = true;
            armingState = false;
            lightningSpawned = false;
            speed = baseEnemySpeed*2;
            with(bolt)
            {
                instance_destroy();
            }
        }
    }
}

if(attackState)
{
    if(x &lt;= attackPointx)
    {
        x = attackPointx;
        y = attackPointy;
        speed = 0;
        image_speed = 1;
    }
    if(image_index == 40)
    {
        bolt = instance_create(x-sprite_width/4,y,objZeusLightning);
        if(instance_exists(objGate))
        {
            bolt.direction = point_direction(bolt.x,bolt.y,objGate.x,objGate.y);
        }
        else
        {
            bolt.direction = point_direction(bolt.x,bolt.y,objArcher.x,objArcher.y);
        }
        bolt.image_angle = direction+15;
        bolt.speed = arrowSpeed;
    }
    if(image_index == image_number-1)
    {
        initialState = true;
        attackState = false;
        sprite_index = sprZeusIdle;
    }
    
}

if(frozenState)
{
    if(y/* + sprite_width/2*/ &lt; 988 &amp;&amp; !smashed)
    { 
        if(image_angle &gt; -90)
        {
            image_angle-=1;  
        }
        ice.x = x;
        ice.y = y;
        ice.image_angle = image_angle;
    }
    else
    {
        if(!smashed)
        {
           HP -= maxHP/4; 
        }
        smashed = true;
        if(sprite_index != sprZeusSmashed)
        {
            y = 988;//-sprite_width/2;
            gravity = 0;
            speed = 0;
            sprite_index = sprZeusSmashed;
            image_index = 0;
            image_angle = 0;     
            image_speed = 1;       
            ice.sprite_index = sprFrozenShatter;            
        }
        if(ice.image_index &gt;= ice.image_number-1)
        {
            with(ice)
            {
                instance_destroy();
            }
        }
        if(!instance_exists(ice))
        {
            recoverState = true;
            frozenState = false;
            smashed = false;
        }
    }
    
}
if(recoverState)
{
    if(abs(cloud.y-y) &lt;= 10 &amp;&amp; !recovered)
    {
        //x = recoverPointx;
        //y = recoverPointy;
        sprite_index = sprZeusIdle;
        image_angle = 90;
        //image_angle = 0;
        //direction = 0;
        image_speed = 1;
        recovered = true;
        move_towards_point(recoverPointx,recoverPointy,5);
        //TweenFire(self,image_angle__,EaseInQuad, TWEEN_MODE_ONCE, false, 0, 120, -90, 0);
    }
    if(recovered &amp;&amp; y &lt;= view_hview[0]/2)
    {
        if(image_angle &gt; 0)
        {
            image_angle-=1.5;
        }
    }
    if(recovered &amp;&amp; abs(recoverPointx - x) &lt;= 5)
    {
        initialState = true;
        recoverState = false;
        recovered = false;
        direction = 0;
        image_angle = 0;
        x = recoverPointx;
        y = recoverPointy;
        //speed = baseEnemySpeed;
        with(cloud)
        {
            speed = 0;
        }
    }
}

//cloud movement
if(frozenState)
{
    
}
else if(recoverState)
{
    if(recovered)
    {
        /*var rpx = recoverPointx;
        var rpy = recoverPointy+sprite_height/2+sprite_height/8;
        with(cloud)
        {
            move_towards_point(rpx,rpy,10);
        }*/
        cloud.x = x//+sin(image_angle*pi/180)*20;
        cloud.y = y+cos(image_angle*pi/180)*(sprite_height/2+sprite_height/8) - sprite_height/32;
    }
    else
    {
        if(abs(y - cloud.y) &gt; 10)
        {
            cloud.y += 10
        }
    }
}
else
{
    cloud.x = x;
    cloud.y = y+sprite_height/2+sprite_height/8;
    
    cloudDark.x = x;
    cloudDark.y = y+sprite_height/2+sprite_height/8;
}

if(instance_exists(hpBar))
{
    hpBar.x = x;
    hpBar.y = y + sprite_get_height(sprZeusIdle)/2 + 8;
}

if(HP &lt;= 0)
{
    //instance_create(x,y,objFootSoldierDead);
    //audio_play_sound(sndDragonDeath,0,false);
    dead = instance_create(x,y,objZeusDead);
    dead.ice = ice;
    
    //dead.speed = speed;
    //dead.image_xscale = image_xscale;
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!recovered)
{
    if(wet)
    {
        frozenState = true;
        initialState = false;
        spawnState = false;
        armingState = false;
        attackState = false;
        recoverState = false;
        ice = instance_create(x,y,objFrozen);
        ice.image_alpha = .7;
        gravity = grav;
        wet = false;
        image_speed = 0;
        speed = 0;
        with(other)
        {
            instance_destroy();
        }
    }
    else
    {
        with(other)
        {
            var inst = instance_create(x,y,objBrokenArrow);
            inst.sprite_index = sprBrokenFrostFireLightningArrow;
            //inst.direction = point_direction(other.x,other.y,x,y);
            //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
            var hspd = speed * cos(direction*pi/180)
            var vspd = speed * -sin(direction*pi/180)
            var tangent = 180 - point_direction(other.x,other.y,x,y);
            inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
            inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
            instance_destroy();
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLightningArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HP -= arrowDamage;
/*x += 1;
burning = true;
burnTimer = burnDuration;
if(!instance_exists(fire))
{
    fire = instance_create(x,y,objFireEffect);
}*/
/*var inst = instance_create(x,y,objLightningArc);
inst.currentEnemy = id;
with(inst)
{
    event_perform(ev_other,ev_user0);
}*/
if(!recovered)
{
    with(other)
    {
        var inst = instance_create(x,y,objBrokenArrow);
        inst.sprite_index = sprBrokenLightningArrow;
        inst.image_speed = .25;
        //inst.direction = point_direction(other.x,other.y,x,y);
        //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
        var hspd = speed * cos(direction*pi/180)
        var vspd = speed * -sin(direction*pi/180)
        var tangent = 180 - point_direction(other.x,other.y,x,y);
        inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
        inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
        instance_destroy();
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objIceArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HP -= (arrowDamage/2 + arrowDamage*frostDamageMult);
if(!recovered)
{
    if(wet)
    {
        frozenState = true;
        initialState = false;
        spawnState = false;
        armingState = false;
        attackState = false;
        recoverState = false;
        ice = instance_create(x,y,objFrozen);
        ice.image_alpha = .7;
        gravity = grav;
        wet = false;
        image_speed = 0;
        speed = 0;
        with(other)
        {
            instance_destroy();
        }
    }
    else
    {
        with(other)
        {
            var inst = instance_create(x,y,objBrokenArrow);
            inst.sprite_index = sprBrokenIceArrow;
            //inst.direction = point_direction(other.x,other.y,x,y);
            //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
            var hspd = speed * cos(direction*pi/180)
            var vspd = speed * -sin(direction*pi/180)
            var tangent = 180 - point_direction(other.x,other.y,x,y);
            inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
            inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
            instance_destroy();
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFrostFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!recovered)
{
    if(wet)
    {
        frozenState = true;
        initialState = false;
        spawnState = false;
        armingState = false;
        attackState = false;
        recoverState = false;
        ice = instance_create(x,y,objFrozen);
        ice.image_alpha = .7;
        gravity = grav;
        wet = false;
        image_speed = 0;
        speed = 0;
        with(other)
        {
            instance_destroy();
        }
    }
    else
    {
        with(other)
        {
            var inst = instance_create(x,y,objBrokenArrow);
            inst.sprite_index = sprBrokenFrostFireArrow;
            //inst.direction = point_direction(other.x,other.y,x,y);
            //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
            var hspd = speed * cos(direction*pi/180)
            var vspd = speed * -sin(direction*pi/180)
            var tangent = 180 - point_direction(other.x,other.y,x,y);
            inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
            inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
            instance_destroy();
        }

    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFireArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!recovered)
{
    with(other)
    {
        var inst = instance_create(x,y,objBrokenArrow);
        inst.sprite_index = sprBrokenFireArrow;
        inst.image_speed = .25;
        inst.rot = 0;
        //inst.image_angle = 270;
        //inst.direction = point_direction(other.x,other.y,x,y);
        //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
        var hspd = speed * cos(direction*pi/180)
        var vspd = speed * -sin(direction*pi/180)
        var tangent = 180 - point_direction(other.x,other.y,x,y);
        inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
        inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
        instance_destroy();
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objArrow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//HP -= arrowDamage;
//x += 1;
if(!recovered)
{
    with(other)
    {
        var inst = instance_create(x,y,objBrokenArrow);
        //inst.direction = point_direction(other.x,other.y,x,y);
        //inst.speed = speed * dot_product_normalised(speed * -cos(direction*pi/180),speed * sin(direction*pi/180),other.x - x, other.y - y);
        var hspd = speed * cos(direction*pi/180)
        var vspd = speed * -sin(direction*pi/180)
        var tangent = 180 - point_direction(other.x,other.y,x,y);
        inst.hspeed = (-.25 + random(.1))*hspd*cos(tangent*pi/180);
        inst.vspeed = (-.25 + random(.1))*vspd*sin(tangent*pi/180);
        instance_destroy();
    }

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do Nothing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if(HP &lt; maxHP)
{
    draw_healthbar(x-sprite_get_width(sprZeusIdle)/4,y+sprite_get_height(sprZeusIdle)/2+4,x+sprite_get_width(sprZeusIdle)/4,y+sprite_get_height(sprZeusIdle)/2+8,HP/maxHP*100,c_black,c_red,c_red,0,true,true);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pal_swap_set(sprZeusPal,zeusPalIndex,false);
draw_self();
pal_swap_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
